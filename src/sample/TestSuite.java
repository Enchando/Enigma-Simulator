package sample;


import java.util.ArrayList;
import java.util.Arrays;

public class TestSuite {

    public static boolean fourthRotorTest;
    public static String testString
    public static String testString

    public static ArrayList<String> finalResults = new ArrayList<>();

    public static void main(String[] args){

        testOne();
        testTwo();
        testThree();
        testFour();
        testFive();

        boolean failed = false;
        int count = 0;
        for(String result:finalResults){
            if(result.equals("False")){
                System.out.println("Not all tests passed succesfully, failed at test: " + count);
                failed = true;
                break;
            }
            count += 1;
        }

        if(failed){
            System.out.println("Testing went wrong.");
        }else{
            System.out.println("All tests passed!");
        }

    }

    /**
     * Test One : General enigma settings.
     */
    public static void testOne(){

        System.out.println("TEST ONE: STANDARD ENIGMA USING THREE AND FOUR ROTORS, NO PLUGS OR RING SETTINGS APPLIED.\n");

        /**Three Rotors Test with 520 chars**/
        System.out.println("Test A : Three Rotors, 520 chars, x 100 Tests");
        String correct3Output = "FUVEPUMWARVQKEFGHGDIJFMFXIMRENATHDMCEVOQHIUWRRGYSJADEGKHYJETLBLWVZNUXFNSPICQFGZCZJKYWLLGPXJKBYTNNEFYKQTCJOLGCWHGXUEYOQXDNIGIDEMBXACVPAVYUQCGPXILERRSJSBOOKJWXVPXKLUUOKXMQRCSYSXBRDAHMFONSMLUOGLAEHOQXDPKGGWWZWHIMTWCXCKJHINFROERNGAAZQLFRWXQIVVKXQODPCXYDVPXVUWWREVHWGKCNOFJORUQROZTJTPXZWICWSKIJVJXMATDYCROMOOPVNIKIDWSKQIICVYIXRPQGTDVOGGKREOFJFOREMCTYIXCUVQREROWGQHYVGSEBNSEFBYIJARHJKERTPNOKKNQUFOHRPMLPSZTBDPWAFCDVZLMFKNRHTWYHVCXLRXQSBYAKQTPXLZEHVYXYSBKZOSSFALSTXANXOPBCOFRHUVJHCKWKMPUVZUEEORQEWZLHVYVPOYYUBYGMXROMOJMFOCBUYOU";
        fourthRotorTest = false;
        ArrayList<String> answers3 = new ArrayList<>();

        for(int i = 1; i <= 1000; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorINotches, 0, Components.RotorI.clone()),
                    new Rotor(2, Components.RotorIINotches, 0, Components.RotorII.clone()),
                    new Rotor(3, Components.RotorIIINotches, 0, Components.RotorIII.clone()),
                    new Rotor(4, Components.RotorIVNotches, 0, Components.RotorIV.clone())};

            Reflector testReflector = new Reflector(Components.ReflectorB);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>());

            StringBuilder output = new StringBuilder();

            for (char c : testString520.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers3.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers3, correct3Output);

        /**Four Rotors Test with 520 chars**/
        System.out.println("Test B : Four Rotors, 520 chars, x 100 Tests");
        String correct4Output = "IJOFRXMASRYQCHICPHDUWAYRCBDMGCAAJJNLDPUJLNSYWSTXPBIACKQLKJRZCNLZYDNUXFHOYGPEIVYMGKSQDLQCPVUJVWNNPXAYUNOTGEXTDMABOXVGSBKLSOYIJIMGXACMGNWBWZYQYTUJHIESXYYSGZQGZCZKSLOBKVLJFXNUIMPXCCQHPKLEXQGNTMLCJVWGMOCVWMZMXNZYFPFVJCKXSDNCYDBYNGCPSXPFIVYFUZVRIQESEAOQMOFTVURGHSLNPIJMZCKKTRNQACVWOYYAPJCPFKLJOJJNYIBNAZJKMOKABWITNDUDEYAIPWTOGBJWVZAFOEHQTEHNLPUKQLDSYIQFWNHIKLMVVQSCVMSHWHRZRRQFERBQCHZTOPKKNKSJALQLNWQHYIBTMDJKJQPBGZWAZBHFOLNCQDMJCLHPNPERFOOOODHSLVYVPRIUUKYWTRILTXREWORLJOEPUJOMBGZURFWNLSUEKNKJNWJREBDDMWTKVOVZSKROMOEMDGTGFWNI";
        fourthRotorTest = true;
        ArrayList<String> answers4 = new ArrayList<>();

        for(int i = 1; i <= 1000; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorINotches, 0, Components.RotorI.clone()),
                    new Rotor(2, Components.RotorIINotches, 0, Components.RotorII.clone()),
                    new Rotor(3, Components.RotorIIINotches, 0, Components.RotorIII.clone()),
                    new Rotor(4, Components.RotorIVNotches, 0, Components.RotorIV.clone())};

            Reflector testReflector = new Reflector(Components.ReflectorB);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>());

            StringBuilder output = new StringBuilder();

            for (char c : testString520.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers4.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers4, correct4Output);

        long startTime = System.nanoTime();
        /**Three Rotors Test with 10400 chars**/
        System.out.println("Test C : Three Rotors, 10400 chars, x 100 Tests");
        String test2String
        String correct32Output = "FUVEPUMWARVQKEFGHGDIJFMFXIMRENATHDMCEVOQHIUWRRGYSJADEGKHYJETLBLWVZNUXFNSPICQFGZCZJKYWLLGPXJKBYTNNEFYKQTCJOLGCWHGXUEYOQXDNIGIDEMBXACVPAVYUQCGPXILERRSJSBOOKJWXVPXKLUUOKXMQRCSYSXBRDAHMFONSMLUOGLAEHOQXDPKGGWWZWHIMTWCXCKJHINFROERNGAAZQLFRWXQIVVKXQODPCXYDVPXVUWWREVHWGKCNOFJORUQROZTJTPXZWICWSKIJVJXMATDYCROMOOPVNIKIDWSKQIICVYIXRPQGTDVOGGKREOFJFOREMCTYIXCUVQREROWGQHYVGSEBNSEFBYIJARHJKERTPNOKKNQUFOHRPMLPSZTBDPWAFCDVZLMFKNRHTWYHVCXLRXQSBYAKQTPXLZEHVYXYSBKZOSSFALSTXANXOPBCOFRHUVJHCKWKMPUVZUEEORQEWZLHVYVPOYYUBYGMXROMOJMFOCBUYOUVAHQIXXADYVEWGRKNNLGBATWKLQHRXVGOQBLBPNPMOBBKYNSNYUIMAHWRKMRHCHVCHAFHBMALLFYNACAHYBZCDMUHYSBMONCEQHRREVGZCZEVHVQWZCKKEJQLXUECLSJAEBWDQBDFYJXIGWGSHJDUPKLSJAVYWDPBXNAZSMAZFYAGHZEAIVKSLQMGTDMWNSXXGUJKLYVAFMOABMKLEXFLNSGCWYRXYXDPUCRAGVASRHNSTHMITOAPHEUVWHHYDOQLNRNPTWRWHMDMQZTACJQTMVYKSVVSTGFUPUWASZRLQPWNUSMCNTHNCUOIKQLNOIZSCUVGTAFCUHZTMRVVHWKQLJGDXQCYVEUZTMTCSJESJAQNOLNKRIFEXGGNPHISTRDACKMTACIJTYMQZTEZITMPMAYDLVUEUDIMUVBOINWLNMZJKWBVWFVRTFINUVOLMAPCVGHQBVZRKVJRGQZDWGDEGKUYRZVEBQWLSBYLNNYSSNQUQNVPZJRUYEMGUVZAFWOWEBNZKHLQSTXAHZCYPXSLSJQRZDCMANVUGZCZFTDZUSLSPLSAFFCWAGONSURHIJHHJEKTFWNILAFEOWZQZJMELQQIUUSQBYIRFHIDVCHFJCMEHDUVDMQZINXVEUIWGSHEDYVYFZHHEBNSKSPRBJAPHYDYAYXHQYDSJAGZCZKSUFGQEIIILXDRURFSHKOTOIFUZYGSURFWNEUUEDOCDMJRPVJTQIFZLIPYWZRNPDVOBVHKDOZJFOJOPUUYIZRHQQRICZECWLJYPCPUYAYJSIENELIHINURKLKIHTDKOIOLIXDTUDYJEJKTXXFNAYEZQHIMNSKSALLFADHZFGJKHKMNLSJAYFOLWBJTOKVJJFXRKSZDCOWXKZRHPFRHWRFPMXUROSHNJWKQZDYGDEAHUVHDQOBIWSBJQSQMSOBFVNQNXYRKZCZSEGITMPMBSNUTAEQDMSKQLRIMRKLLPCHNUWUFEHBYMCUVHRENOQCNPBSEUWBSABIXLMEXEBRESBTXZJKFMNPCSLLUGBOKWTDEWDXDEXYOBYWZFKLGMZIZUMRXBDREVUTHNUDLCBVNUSPQLVKVGSTGMGBABAZHCLVUJNUYLAKXBRZVDEIJSUEDGTBFWXYXDRUJGHQLWRQNFUEDCKUKIGFEUKLHHAQZGZUHQNZBVOLODMDGCXYVWRQWVKHUUOOIXYPOPHUZKVMSBCSWJWYTSDVGLQKQLDRZCEPRSLSKLNOXFIGKDTDEOLIVASQYBDWYDVWVDVEIUZDHRHMGIHWNVHRQQUJYAJGQBYIIFWSKQIKSXWALFWNKEDVNUCILHMNXOINSYVVIQLAYHEUGJZNNFPGCQFIMREJFTSEDYEEOQVWMXLARJTPKRHREMHTFFAIRFILFGESUEGUOEJKLWDHDNEBDYPEQRKLTXIYFSYLCCJHRGZLFSNWBRPWWBRNOVZXJHEEBVPVIPUUJDTCZFMOXFJPBGRKVTGREXGTALBSXAILVWCLKENMNUUXRFUWOEZXRWMRLSAFLPLBYKTIKQNEXKSHMBKHGBILJQGOZUYIPLIMSHRKSDWNYKBMVZCSYNXQPJCPFIMZBJTYHGKGSXZFXDITDVFOQBPCJGKGZPTMCTJDKERKRZWCXUXOZDEPFSRQHUOBFWCHUEFQIPEXFSNHWXYOFVCKWSCAILZTFIAFDDXSZFOPFAPUSKHCNVXYGJRPWACKFINKLZBQDNCUPHUBWGKLMCGGHYKWTDEVPETWUFSBSWILERSTFUTFYNCUVKQLMHPZNXNGSBJQSXVIJFMZXWXRENRTFZLRIQCHHIOSKYNSGRQBDMGWIRYIEXRGUJWBJHYMRWBBBYFDMMDXMACOMOROKLVOEWOROMJHWYARAYQVYGQXQRZTVLTGJLIWWSKJONBEVVHZQKZFHIRSYIBGMMXMSGKXTKQUDYSEVZVWACCGHGAWMMSUVELSIWBWURHIVWOSDMSLOAJYFFUZBAYIKKDMQRCSEIPXDIRIVLQMGADLWBKHIBUJKLBDHWXFBUBKLYASONHRQOFOKEYAPOISWCIAWSKZBCKANJYEDIZFMOVLJHSNIMWSKSTZWEQVRQQTYDICMZCCPACUFLQQIJOJIFRLAPYDDVCABSEMENDEBQIOKIDXJVNJFXDVJTQUCPGEQDEQIQIXLAFBOWWGDVWNAYASYACQNTWTWMNRNQGTXYQZOPQIKKMEXNPEXPWDYIZQUTACBYDYQYISVDSJTMGICLHPXNRZUJBYOMHAFWVHSCJQIGUYYIQGRXRODVYZYCGHJIEOIFUHJGEGUHNBBVXDNTCYKSKHTMSHRPVHIQZCBVILJQMWRUCUVKSKLIJQYNVFTZXKWGGJMYHGAQLWRFOMGTTMNFQNSZUJMOLEYKITODJPUGKITYMYGGSXQRRKMKFWMENKUUVYAFXJZFBWXRLSAFLORQSISJAVYTWZYLWYYKIMNPCSPWHGWNGWQRHSTCHHBJQTNDKEJQEZTCGLITWSKDMHBDEBOFWNDATXBVEAPRCGFVYFUJWBLRFQNTILGJHLWLVNBOBNPSTBPENDMOROACUEJPHMCKAMMYFDMQLXQAQINFWGMOEMOWEDAOMEBYAOLUZBJITFLSUEUGTRYGFFNDEHRKSLCTKBBWKEVWBLPXTHPOIOIKQLGEVRPZUKVZUEDLUIZFMLXJTWDVZEJPLDACSBLNGGZAHDIFWSKQIEFULNFWEROQDVUEMRLPPOIPUEXYRZXTRXOGCHUEFKUMSBUSOYFWDZXYJKPGVXJKLNCQNKLMOQJACXYYMQPXSFWNQRGJDVQOQZXNZJTPFUJKTPAVJJFXFGCJUAMGDTGQNWDFGKYIOCGVDAVWEGYAOFNFUVYNSRCDRBXAEHOQAFGMZUMEXGZFOPFFWBHNUQLTBVNUCBTIFMMGXCJZBGJBZXSCHVLSQZCZVCSMKHTXRDMZDRDXEREQOQKLYWKWNPSJADEYAWIRNGEBOWILXDHTTIIYMDXRHTWIHKMDMEEIOQGJXFQPXBKUTEBQISOGXLJSFAJKDVWZWCGCYLCGZCZHTQECNPSSVZGJVSFBYAXVZUVPFKSWNVOLQPTMPMCZUCZMNVULQWDVZRZXEDICLSAFUOMRIWGDQLQJOIDZTTYCJVROKLBWAKMAGOQEBDMFGANRJLDPXYUEFHESCRNSUKLTWQKNNKDYIEWGAFBLRZOHJHEOIMGRYETRAEJIUJFGCJUJSMDMGHWWDZGVQXVMAUYDZTUIERDRALMQNNSALGNTHAGHYDWBMXFNIDUDOUVEXIDUFFKTVDGTKLOPPXIKKDTEBHRIUGYIJKBMZFCSEIAZDFYZCWXQIAMYPBNGMXXYDVFDVFCPISWSKREQUTSKKROQWGYASABUHJBPBQNGKEMSPZROGOHITXGGZIQZMFXQNNSUPDONHAGHVZTXCTQJPMCGFIMGKJWBJXVQITVZLNWIQMDIOAJYFOLAGHWCLPASQRJQTNOLVEBOBLQUVBNOHWSOTOYDUEVXEICRMBXGZCZQDLFVCMQUWGKLRDHGSAKWTXRLNZQLZUQLMPLSYAWQJMQZFHNYFXYUIHCCBPESOQJQOSUPYFZLHEBWDKSHYIJSNASBJQNIDVDARBVIMMGAVPHQCLPPUJTXPYQUWBYVCVYVPCGHUJNNRZSBJQKBPXOAXMZNPPFRGWQOSLHPACMONMCJIUHDLKLHRIVNIQVIBFNPWBBGLHOETFKRHOLRHCKRPMEUOQICYCAQFOELDCJNSGCIXGXAMHXYXDKENIGLMQXPUIJHBVEOTTADZFTXKIMDDTFHNACQIAIZCOGTZDYDDVYGIIXAMFXVYRESMTPGBLFPJKXDSUHIEOMOXRHTWOHDXZQUUYEUUEPQADWTREVFOXYCIYMJGGZXXYMOPMLOWJTPKGZCZCUABJRXDGTMPMRLQPEOKHTTGHROAEAUUSBABVMOBDUSMOEZDTGWDFKIARHVMJFXYASBYKPDCCFTGNSJPUAZHAHHSBWBBXRQHEJYEHWAHEYYFRBGUXJKZTOJUZXWDEGRHWDSHGYISXFGROQZTOUUXOEIDVYWDSZIBSYHFBPWGJSGXWALBFBMSYATBMTZSOJONPMOYVHWZJFPNQNYAVNOCGQDGCZFXDAIPXDTJUEHWOLAOKBCGPRSKEZTZCXPAXSJAQNVPTCMUEXSGATMPMJBKUNFSJAHWOLWAXDAOVHJFXZTDBPXSYAZMJTFUZLQJPDYHEVZLNLWGBZIKGTWXIJVIBWYTDICVZERGNZZZCOGJVYIJVTBNNTDSCQRWBHUFLVEANMUVDMBLCKDMULYEUNUJDTPTIJLEXRKQLRXWAHSAACHYATXMWKCINWSKYAPUZFSZFWNPWSHRPKJNKHVLQNREWATJUVVGJFXLNDHDOZBYMCJTGKVUWQPNDLCJKNUSMMMCOYICYFDMQMZPZNHMBWGMOXFGAOBRKVDEIJRRLNLTBXWCHEREPLBCKTOKIMDMQZCKBSWARWGUECSRARMOEJHWREMYTOXWMCUQRZTONRYRSIKWSKQIMYVYIOTXDZFDVUTDRFBNEUCJLNGQCKTWVCJFXAFIABGXCQWPEBOLSDCKMJWFRJKKLMBXQJUGMQEBJONNOQFJXHGILHIFMPXSEFSNXRDMZRHCKREMICHJQYCXLVNBNBEBSTBZSTGJOJOHIXDPABSWUGTQFONSCKRJJEAIHDALNNSFQKIPKIUVFUPVHWQZUXYVZJQLDHDSWXGZXRPFZUBNYQXZGROYAWDFZXDAZMUVIJSLUMCTPFSKEYAUJAOBLDRGBDDMXBQLVFKQMXYCSWMNALOYQCTGLNYQSACNPUSHIWBVGCERLPFIHWMGMBVIVRXQGUJZTGKZAEYPGITGIJOXBANTVAJFXSHLCMWEYUIOXRYAOAZZYKHVBLSGJYYXEGBJVEMSIJHJAEGTNDZZFXDUUIRSYBOBKLZBZJNTTKOJOEUUEWIAZDLSJAQNQIABDOCHPGSXYDVTOXPGQLCRMSGKHDAESYSDAPWKLWVTAEJNPUNPVPOAKUCOPPSACAFVZXCEIIUWSKIJOOWWVTWQRILBYZVVMLIXZZYFPFYNOWEURNQBVRKLVHGHQLWRDEZBEGSOYQBPWHITXEMPXLYXKZKLPFYWNRBKQXTZFRKLBVJTDOHJFOKQLDUNYVRHQQRKLZBXPGXXVZHWPFHRQEEOSHACHZTLZOCZTSJARHFUVHKNYGDTCZFBYPABEWXUUOMSQICOJRJDYVEKEDVHEQGTBFWNPUKQLNOCDMWLRZFNUCQASEMIAWSKXYOKHDXLTPDXYJQHPAURKELDTGQIMZIADMFWNXYDVUBVROUOYJTGAHRGKATORHQQRTXYIDQDBFCNKLNSAUNCGUANHBVXDYEOJHQLCRPUOLEMJPGVWTRKEXDXFOLVHBABOIIJBMWPLTOTOSBMORLOQLTVASNPFUYDEVEGZTKACKLXFXSJTFHNNPTWNKACLGUDYACHIPBRBWGVZSDEJOCYRZJEBHWLSVWVGEMBRGFQYFEXXNORVDYQETMPMNGOPMIHFLHWEXFVGWQBSTAYDZTOTHQJYPGIIMZBNWBYIQQMTJKHIVQRKMCHHLLQXYFYHZVBUQYLSJQANLMBJTPKYFUVXRQNWWKCMCHCSULTRQZFRNBDHRUJECTUXBGBVRKRMLZINTDKHWSTIGRZUEFWNLSZTLNILVPYCCHWZBBWJXYNQOTSBZTGMZAENPTIHWSTOAQVNBZAKDAZTPZFCWBPLIUVQICTYLJFGSXVZDVLIRADAHOLNPHRAYJXYOLBPACUEDXNACYHQLJTLNQQDFPRIRFWGQZKCFYCSPEIUVIJQPAOOTXDGWGWBKPLHTKTGKEBKQLTBROJVSJFXICWIWWDUSJAHWYAATCKCUPSSBVZTVUULVDGOQWXWDBIUNVBEQIEUUEDTCLVOKHTJTDMBDQIPHFWNYDKLZIXDDDXMZHWPFAAUQEPVZJFXZTHWWZLHETDOIJOYAINDMCLVDANUZKKFNOGRQBDMGWXHSEDYREUJJQOSWATLUBOXRKQLBSYICUVYHIGJEKDZFGSJACJMGGXDTBSCJVUJVWNWIUYTQIPGZCZKSHRMGHYBSBJQUWXRYUKYTXRAHKSCKTRKYMVZCSSBYQPJCPFGZCZJGCKZLTHDKETXRTIDPCCNFVYGKJRCKUDYZECHRKMABDAIBNBGZCZTRMWFOOZOCHWBRCIJXGFGNLQFUSPBCUVVFJFXVWJBCHBJXPZNPPFXPXIAHUHYACICGPZEJKFINMSTWNRJCNBHPBCHHIKIGBDYVKSRHTWAHCKOSVXJFXERRLEESRSJAGZCZZDEBURXNGSBKLSABKJCYNCWXFUNNOVZNZEKOQHIDMOKSCFUNJTMGZORCPEITFUJWBJHPXRBUAOFOEXMFXJADYVEJKLNXFHWZEOOJTGYAVIVALQDRCQRUEVHTASEXAZDEPFZJHZVHBQWLSJQRUVYBSNNUXRGKXMLPUWRCQEUAFAJPXHLDMGMSUVEBDQWOVIJFXTXVEXASLBNBPUIJZBCKVTOQOTMPMGNZDYIGIQLQIJKSVWNTHZBYDQZBXKNNQLURIMDMWOKFRWKCMGTCSCJXEFMDVGCJTWGCARXXEDIZFGJBLPXYFITWSKHRKSEDRBTBDDAGJMXIZOEKUTEBEXROHFFJFWNYDJQWABIBUMNXXRQIXNOMCWPCSJKDVMWRZCPNGUDEJOQYBOFOBOWWGAFWUXLVONNUFOLNBQJMCWPCSEUAFJCJDBLHLLIMMGXBXJABMZUUJLNYVKANAGBQKLFUWINTGCLJPILXDXFJKMEXCZDEPFFGJJLWBCWKELNRTAYYSFVNFOIJKSYCUTGUXXYBYMEDFSCNZUPULNZQQSFWMCUKEAFWIMNDFPNIACVPAZZUCWPCSGTSHOBWSSDJYEDEAHZKUYIRBHWNPWBFKMJRANSUWXFUMXZXKVLAPILAFFTXMHLFSNYFNSEBSCKWACHHIBYMDDYYSBLBNPREKSTRFBONOACYAJABPCPHRLBDLNQQXXASSOAWGTXFBMHYNBSBWXSTKSZRKPOHOKEICVUCOJJEPDRHDMNHIIVHXQGEUHICVUSEMIMWSKWDOKWQXLFWNTMPMDQKGNDFWNJTXYWJUCPDYIEJKSHYVHPQZOEJIMVPUNOUGQSPAQRXDZSUOEQLVRRHWDOHHLEFWIRVZJQNGDZSOYFCACQIZVLTQNXJGSBDVODDYSSSJAEBFUZPDYIJXIGNPYABUJSBGSJAACJOXKGTRHTJDEUVWZNALVNZNHRHSTBHHLEFUAYXYJQPPPXWKOKJLQOLCCKBJXXXGQRBYVYXZEOXTZKLPFOJNLVFNQZDATXUOJRYDUROBDQIKSUBTYMVUZFDVUABFOFEIDNPJORVISQPHLBACNUCDWZRMZVHDEEXMZALXFBDWVZYAWLNOPBCQFQNJOJZENCBPGSJKBYLLAGBAUWOWXVPXUEUYOLVPXYRKYGLAOBTFKLQMGRNOTGOMJUUJXDDABUKOVUSJTREPOTJPZWARJKLNEWUPGTSJALQWDHPVEBGSAAZFRKMMOVFCFVNCJNSGPPCFUATHBVBYSYGZTIOVJFOKQLJJWZHNIZQRERCNOLVMGYQHWAHBUJDXLTTDSBZTSIFFDPKYTUVAHAILSZKVOJFXWBMYCQOGPCIRHMGRHJIFONUZUJVWSHLVTHTMKOIKQLJPQZUFWNBVRKBXRWKQLVRDEYAPYSFRZBPWHIBYVXDHFTBZBCJDMGIQFVGOQOYDICFYHEBBUSOACMGXNOOKQNVZUJRKOYJYISXDZMSPFITHYILNSZKEJQDGCHLTAFMJTREYLTIPGUEYOQICILJLVGQIPNPEXBFEDMWHCBACVWBSQPIOUDORHREIHTJRUSVABVLNUMKRNUXBZDEPFWFAZTCBDWLSQZHDXAFPKLTCJLNGQQBDMVOJFXYAVNGVLNRUVTGSTYOPAVPVQJFXEROJJGOBDWGWXQIRCYYIXGEXOQDVNZDCAPXIZFOPFTVMZQRHOBLSSHWVZSRNBGBEBSTMKBDNJOYOILBYFSMMSTKSTYFHRZRZXKGEBICHQZNOAISHMIXOIZBZVCKQYHNBXYGJVNUFZXYVCVYWDVZHSVNDQCILJQZPCDCKHOLEBNSQPKIEJAZHWGUEXFUQEHYICOIWDOPSOLNHIBHITXVNXHLBFGNFOMGYCBCVXMQUUJICROKMNPXEZYFPFWNOVUYZOKZFGJHSCOEGKKTXRREOFTIDMXXGKEVWAZECIRVDSACUVIZHMWPERINPJQPCCZWFORJBDJOCWHIJWQCTQRJQGXZHXBKETEBRESITFNJIFFZFICGMZBZYONJKLEXVINLNFDMCQRBYIINNDEQQPFOREAATTMACJVGTFGSWOKKXVLSACLNPQHVZZZTKJKJQHMYFOLBNBFOZBRBASDMODOTMPMDJNHLADQGJTTWYRJBPPLUPCHICLPKVNKKATHWIJWIPDYTVAJFXZTGIZEDLUROBDTWABDHNBVVJFXSHZZYCKNZNHNPSTPNOHEZFWNACBYTABGFOZWHCJZBGWLJSPQUTPWLNVCWQBDABMWXVPXLUUVCTQDKEQZOQIBJPGIQWXXYNRVYIRHOBCHHIEVDWXUAOMDEYASLSDBPBFWHIUEEWTSSJGPQGZCZZKLXBUFWNBVGJAGJHGQLFRVYHRHWXEASQBTKEICIKENHRQIPQNIJEXJNMTHGBGTBYCTPXIMHDLNPOLINOLXFWMRACQZWXYYOSIEWSKQIRTRFCEPSSSBDVXFPXBFNGUTGGKXUBALUTRDBVAFBNOVRIGOQGZCZMUPWRUTTDBVUEZMFETAVBSUVKQLUSBECLRPHIQZUABRMQLKRNPLNFQKJTOXXGACLNAGYUJDJFEQNUVNRUHWRIGFCHHIHWUYOSAGMWXWDRLBJDMWYRVZLNUJKRNBDOGVYEXWCADTXEDIKEUEKTRDAOIOWSKOLTYMMOKEZIKEUEENKANTEYDHWAHWPITBGCJVZFZTGGZMSTKFTYFFUZZHMNGMUUKEJQHJEEMRDKGMSTWFWKODMQXTSBWBXFMDJHVUSOINSNOZLLFAZHZFHIFLXZEQLSRLQZBOZEVKWZCKTMPMAWAJMFEODTGUVFWIAWVQNTXYUELOOVJFOLJFOLNNQPVYYZTKQRHITKXQBGHLLXRNSXXRTSEAJHPWVWWETOINADMPUSTILKBCBPESOQTXPMOOWTPEIGZCZCNOVJGZTKTMPMFSYYHSESDMSLNEQIDKOKEMOQCSMQKMNASJAYFXYWFWNFALRPNPFGIMUGQZQWPWXWDUZYMMHGIXTMPMCCHYGSAAMNPUVHLHEWQXRGACJQSXTOYXHILNPIJKSAFZTHDBACTXCYHQYMVLSKLJOKSNDXQNEZOQRKDTHPBEFANJTREXTTCPQSSASBMOEGUBGANFUNPWDHUGEBSLUPACAFHTOZRAFHNKLLNMQNCDMLTPJKQZZVRNTQLVRLQKQLYJVEHZLKGTNUUABRPNCIFXRSTJTWNTRHSBVZRKFABKCYJSEKLZBQJNOKRFWNWGRKMWKQNLZGHHWOLWBBZFDYNELSZTLEAVJPSJAPUEXNUPLYFEOIXYHISWRPGNPOIIMSTHYREZESPAJKUENZTCRGEHDWXIJMVITQTEJINPVWDPRASKOIJJTVPZYLUPBHUBQRGJRXTLVOSJAMSREBWTFUOQRTTMPMRPMBCKJKELQNSQIZOUAAXHWGFGAVAZGJNPUEBUVHTLEWJISFXYAFKBUPMLROVEBWDFBLZOJSHALSUENOXLVFPOILQZBBVJZQYTMDLSUEDKNOPOCQFJTIJJXDTPTEJITMPMGXZOBDXKZEBPFXIUFNJEXIILWBHLOGLCNWUG";
        fourthRotorTest = false;
        ArrayList<String> answers32 = new ArrayList<>();

        for(int i = 1; i <= 100; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorINotches, 0, Components.RotorI.clone()),
                    new Rotor(2, Components.RotorIINotches, 0, Components.RotorII.clone()),
                    new Rotor(3, Components.RotorIIINotches, 0, Components.RotorIII.clone()),
                    new Rotor(4, Components.RotorIVNotches, 0, Components.RotorIV.clone())};

            Reflector testReflector = new Reflector(Components.ReflectorB);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>());

            StringBuilder output = new StringBuilder();

            for (char c : test2String.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers32.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers32, correct32Output);

        long endTime = System.nanoTime();
        long totalTime = endTime - startTime;
        System.out.println("Time to run 10,400 encryptions (ms): " + totalTime/1000000);

        /**Four Rotors Test with 10400 chars**/
        System.out.println("Test D : Four Rotors, 10400 chars, x 100 Tests");
        String correct42Output = "IJOFRXMASRYQCHICPHDUWAYRCBDMGCAAJJNLDPUJLNSYWSTXPBIACKQLKJRZCNLZYDNUXFHOYGPEIVYMGKSQDLQCPVUJVWNNPXAYUNOTGEXTDMABOXVGSBKLSOYIJIMGXACMGNWBWZYQYTUJHIESXYYSGZQGZCZKSLOBKVLJFXNUIMPXCCQHPKLEXQGNTMLCJVWGMOCVWMZMXNZYFPFVJCKXSDNCYDBYNGCPSXPFIVYFUZVRIQESEAOQMOFTVURGHSLNPIJMZCKKTRNQACVWOYYAPJCPFKLJOJJNYIBNAZJKMOKABWITNDUDEYAIPWTOGBJWVZAFOEHQTEHNLPUKQLDSYIQFWNHIKLMVVQSCVMSHWHRZRRQFERBQCHZTOPKKNKSJALQLNWQHYIBTMDJKJQPBGZWAZBHFOLNCQDMJCLHPNPERFOOOODHSLVYVPRIUUKYWTRILTXREWORLJOEPUJOMBGZURFWNLSUEKNKJNWJREBDDMWTKVOVZSKROMOEMDGTGFWNIMKQLALCBDYIEYDVWKXXMYUYVCYFHRKSGFONKBMJKCSBGABYHNFUOIJOKSGNRKTIDXYAFOPWOXKBHBACQISZKYIROFOSBDVYOEIHRMKXIMTWEUGNGYVXJFXXDBEJSCJEPDPUIJQKIHRTXAGWGMOZDUZPICLFACWDJCDWEXMAUJKYAPSNYWSEQDLQHRCUIMJSVBJFXTXJVGFFXUCOCJOLGIXSAOVVJFXERJHAZAFYKCRHTWTHMYINWXRXYSHOGQJQZZFHWXJOUWHYIVQUTSBJQGLZYFSFVNCJMGGCECNXIRFUJMOBMRATGVKSMSKQLYYZROGXXLSVWJUYEJHPIIOIDMNJXTARHJBEUHIKOCILPMUXMSTWYOHIOYCOVNPJQRABPIUKDTKLIJIDNDUTSYAILKLVYQHAUYRCBDMGTPMHVNNQZUJICGEZIBTMVXPUGKXAQMNGCLVJKNUCSAWXMNHUDEYASJLOXBBFWXYAFROUPSIKETQNWDZDQWUYSGANPKLHYTNIHZDHOIZBIZHBDMNNZGTJQRQOPKLGTQXRXYPBDBUZSTADATXZJWYFSDGGCJJOGWBLEFQITILBYTOWHZHRUVOIOLVOANSYDDCPWICVABMIBADMYFDMILHNVUMQUBVJQEYOQYDILWSKQIKSUZBKNTZLSDVUCJRYHFENOIREKSTCTLTLDKENUIHNFTHQQPOIKQLWHSMSQUTVZJQMIUIDJMPXHWWDAZJRFLIEFOQZTSGKFNLOFJKLQIWBNSZDYMEQRDVUEQRQZYOCPUGKUTLXTNVSJFXUERMGGSBJWEQNZBZIYLUFGGXJKERXFNKPGCQFWXZBJMRPLEFWNILVWRZKCNTRNVXRVPWJHUUGVMJFXJQOWAGQZAWMDEHRULGNFRBBWXYSHUJURQZDEGEBWDUAGNTJCUVNPTXDPMHHKBLBJTMGEGZLPFOAOUJICBVWAJWINWSKRENWTMRPQNTROHIKOPXLGEIDNPHRYMIPOYHBBACVWRMNIALMQXMSHRTBMLUFTBDYDQZGOZGCQLWRKLNSQMNPNYAYHWGQZTKHQJNRRVBDSTNXKTSQEJIPWHILIRHDWGGQQNGKAYBOYLCGVROICZKUEXBNMULQWDSXVQEDYFEJKAFFEJKAIRSVPUTWTDMWKHTADKEKLHDEGZROWJKLTWVJNMDMDNCQRYANABFKPIYWSKAHPVQSQZWORJKTXTJUQBTDLGTGWDXWLASGQNTPWMOXFLBXGTAKNPOLSAKNLOXFGACVWVIPXDNNUULQSTAOSDVBIQFHIAFZGOJGQLFRVYQIHGDEEVMTUILDVVKTJAHRMVOINSTXMQVVAQHKEBYZCOPTQLVRKLKQLGNZEASTALSFGLLNNRUHQLQNVPMUEUYLIGFGTTXJEYAGXUVOPUQIHGXEADYVEILDVUPKRNKNKUNPEXWFLDTLWXRACAFWCOMHBJAEYFEXEMRPCEPTSSBRKAZFCLAREVUVUVYMDPWWLCPILWBOLENIRVDSXRNSIZEYIAARHGTFGZIYZDANGUQNVPAZBUBPLGPJKAFYOWPBBUMOWXJOXRDQGYSVACHXDHIXIDFMUXQNREAOTHDMIGFYDMOUNRRFAOZJCJOLGYJTTALJPQRFGJZXCJBXKZFOPFNIXLAFEXIZFHIGOZMLXNCUYFREYGTONYFWNILAFFABMHFGSQYFDMECADKXTDDZFGJVDMAQZAYMVYAHULZVVUZQKBVYASTIIKGMZXIMNSPTWXZZASHJKVWKQFPPGCNFUVXYJULOOWSCANPVWPDVOWXGEQXRMGCMQPJKRIQUJYAVUKQNHGMQOIREWZTQVSMQUEUMOTMOPYHSJAOIDMKSLMSASTAPWFGZYENOREVDIMQIRFIBEWNCZGTDVULORZLREVXRGKVBEJTBDTCYDLNDABEOCKMTJTQIRWKQPUQYTBVDVDBGGAUAWMJTVPTLMUPKEHIKEERBCCZXQLERNPDMSIDIRKKFMACCSPHPXWUBRBBDDMCFHRJKOYOSBJQZJDGXFDWGHWRESRTREDYFECHZTSZOCTLITWSKKQLBLNZATTDDAFGWCJBQZFLNFODMUTHCCRPSSNPJQBMTVFQLORCJFUGRPLRFXAGCHUECBHZZMEODGZCZVRIOXQDHCCHUEJCQYRSRRVBDVPMDXUARFWNKEKLVMCYXSHGLDEZBSDBIRBBFWNPKLAPFBJKJNEUVUVNRGOWWWCRCHHITYQIHIMZXMSDMEFJWSANUZPWFGONHNJJZPHLQEXNPGYIQMMUGTHIGOZSGDSJAQNFUHKUENYCGVYDSHALTYOSPHIQNUVRDEOWDYGEYDKLDHYYASHKLJTQITCMVPXZXKKEDVPHDUWJRPVFOOLCTLVJAZSKSBFGPJRKWGDMGNPOLCYYQJWGCXACVWMJQVMTDOGLQEXFFPXFGFWNNPUEPMRAWASJAHWVPCYSUJRLAPHIZTPWIZWXOKJTGRECGTAJBUXYQRBYPMTYWSNIUMSRECATDJOHEBOQAFHVUNYBHCLXRWDKSGODMFWNGTGJXFOLVNPTILQSTBMLPLRCTVDABYKPLNOKTYKIMAHRCJDOXENIGTBYDXYDTCPOIJTKQLGQFPUIZFBVUEFZOCKUXSZDEPFPILMKZBTWILWBTSEPKRPRIBDFUPAANSZSDAPWBYZOJFZUNHUGZCZVGSSEYDNCHIAFGKZHMYUHOWXGKFXLLNFVVJFXICGCZWIYEDDIMYAIRITNLKJMCHCSZLVWRHUAOOIYAMREJESRVQCHLNASEOYROOJACUVKSCKWOEMIQRUESGEOFRKFTCJLNGQKRZBFWNYDRKZVMISAMTXHWJOZGZRDMLPPDAZTBABMAANYUYFAHTPMLRFLEPOQAFSIONDCXGZTGPFADBAZBUTYGTKLKZMCSHUVOOIZBZRZVOAZVKCHFGBWLZFNTHKCJSTGGKLRFWEROQWBXFPXXDOCJTGOLSIUALBWFRQRBYECXIBIMLXRHHRXHRWBETBDTMPMGEZVEBALMPUHROLPXNLIBFYDGJVUIFENVLSFOSTOUGSVDYQEEUGJKLROBAPYIQNAHXYEMOHLGPTMPMCGHZGMGFQLQFUHAKEXQVLJFXNUYUCERBYUCMSJOMOAIGNCDVEUXDBWRBOEUMOGZCZRYRQREVVJFXGJOSLSKOTAKFOQIPKDYIZVRJFXDVUSJRLCZLHDEFUYISTTABJWHIFGOEVKSCYHCPUHRZNOYINRBQTMPMGIZYDSZTHQNLNAQWMNPEGIDAQZXFHHFCHNLCJEXGRDVLQZAKCHICONRQIYBDBGZCZIYQYIWOCONPSHEXTHTEUZONPKQLWLFBKQVTACICLMOECOBUBFOREQOTXYSOTOWGRKSZXCBIBZBMSHRXDRWZEOBONPKLGQZKLWHOLEBXYYPAVNJZDKROUELTAUBEPUIGZCZXOYJYPGYXXYLNNIFYDSNLUUVGKAVQXQKEAINPAFVVGSAEUEOLQJOTKMOYKVVJFXERGQZMMJOPJYFXYFWLLNFQATQRQZZDDYTSEIDXRKQLTIOEBHSBSBYATMUOQZUVOKLWDUMNPSBTVDPWTXOSLMCUTBKYFQIQJKYICXAGWGDVXFCDQZIBWSKMGUAVILCWZRUJMOEYXSXGFCNIMIJSKLCBTNFZSBVWZYFVCPZHHUVJOQGPRESNOZWGGJNCJOETEODFODMOVITQGTJDNPUEBIHUDWUYORHAHAHQMRQEVIROGJKVWZSEERDBDLNZQIJOLVMJFXLNFECIYBMSXPUNSKSHIKWACHNPJQGTZBJWYMCACLNNQDQNNTADROHIYBIEKDBMBFOLNPQUQGZOHOILXDOUWIKAMLXGZCZPIGYIZLLPEUNUMMIIMTMRXBDDMFNOMFGFWNTMPMEEUYLSFNNPUWDYUSCBPXYGHISHOLQHYWYICIMJOKSEYINHABROICFWASZHESDOIGKVKIHKWDCCXYSHKYWWGDUNONPYAHZUEOONVZACWBTMRJAOJAEIMHRTYMMSVKBMPWCSEEXVBWAMMPUFUXLPQBSIPFROMOOQRULCINWSKXYYYJYIWMCUJKGJSVNYCSJQEMSVPQPYUZPGNXWGSHNBHWSEECDMSYAZVIXQQVHJFXQZBMGMWTAMMYFTWCLJQJGFWNKEEROYXBMLYTCQNEXFBKYINNGZDATXIBEAGRQLPMSOLHCVEMXMHUSBBYXFKONJVPSHWREWUTNLDYAEJKZTYIYJDIUGONPLNAQBWGVXVGACXDANEFKRIGWSKUVPJBSWZCRVVZQZUWFRYQLYRUVAHKSLNTWUCYKEMOMWCZANPHIDESTTRMIFABRWCHFGPEOSWAOCJPUDMCKROJELTPQRMORUJWHJUPOMSYAEFJJUDYVEEULNAEYAYBYKCPUUVKSLJWNWXRNPLNJMVZJOJYERHAHNHXBAWRCQVZHINJXAJBDTGMSJONVGOQPFWNDAHIBUJDLNBOBXRSTYZLLRFOZOEUUEJIUADFBTBQNWDADXOAOOGODAKLMXHYZSACMLQJOVLQFFQDICZFBYYZUCGDHVLWXWDHFUEGWVCJFXXDUGORZWRFVRHQIVHCKTPDTCRODVHLVKJCGEQACGKNAEZDMRUQLSHIXFNIYBMQXXRDMKSSJLOXPGHILNIGXVRNQFPQNSTMFPOMHKGMILCSPNVVWPNTULQZBCCPXJXROQDAAFWSDWSCOVJRHYAZHHXCPPYSQRJQRZLCJNTTKXRSTNPJNUOFWNDAHIXFYZICXDZMSPFIJSMLBMLUHINUHJUSXJDPGFOWDSKJLSFEFIPWQZJBNAKLGQQMSEXPBXRAZWHRKEQZVJUAAIDIGIMWDTIMWVUHQBBVBYXFUIMOMGXLQWDFUBDLHVRJFXBYYTVSCYJYEXRAHQKQMGWRCQWGXDYQTFKFKLTDEXYPZASGZBDWKEXDMWAZSYFRNBDQIZWKCFWQCTXYDVMHAGSPVWSDEQIZMGPFPBOWXYDVMKNOGAOQJGZCZHXDEFWLCPQRQZTVQMHXXKZYFPFEMJPSOEXIPWMOIZECYRQRPBDIJKSLZMTKNMLSCSJQHYHSHZLRHXYEHXTAQVJJFXBYGSZMGQLORYFREHGTENPFWNKEUEBUCHPBCKFKLZBJUNIRDYXEEUICYVUDKIBHBFOWDPPLWGZOZOZFXDJMHPQZFYNHWAHUGXCAQSIAVZZTYNEWLRPKIDEYAYNONGBBXWZFXDZGDNKGUFORHGKPHKREZCVVGTVWWLEZBRSJAACHRXDEHCPPBSZFKLRQAYHSYNCKLXYEGNJUNXAGXYLNTDMUXCSJAWXVPSFZUSHWFRPWYAKNMUSPAYMIMAHZLZLOFMOUVZTXOZNCQZOQJKLNSUDNYIPAUHQRKLVVEJHRFTNHWEXEWQCVVQQTDAZTDPJDSKXAZJTPFZGGLPFMZUYDMOFWVLVXVASKLJOBMNPVARQQVZFGUMKRNQLORNPTWWNOLTFMRUACUEFECKCAVSSPUQIQGWIKBLPPWGDVSIJHDTUNOTGMGANOAZGUVYUJICFMLWYCTSKHWYAKSGRKDYYEKEZTRTDSJBEYDFOAHNKIZUHWNRLSHIEERDPCCOFPUVPJYQUBPVZJFXUEABEVJRGTQIMUVNCPNWXUHYDAHIEIUJDLFINFOWDABACBVHDBSBRKNYTEQZKYTXRAHUVRZQENIZLSSHLNXKXDJLEGZCZSJUMYAVFJFXFGWZCCLNEADXRSTYAIICPPESOQTXIZMCQZQMPIMZBUTZQMSXSGJKQZNCAAKYSJATGNSPVJAQZAYHXYQZKABNEDFANEBQIOIUCOJIRFGTDVUQFRCENVUUVXYQNOXTSWURWGAFNDWYSSSJAEBMGZVDRQJCMVUJYAVVMHEISJAGZCZOZZWVDYQESBICRUQMAOAOMYFNSTLMBUWACHEUUEDGCNECUFOJTZBOPVIPSWVRGTQZBMQNKDHVLTGLNPQUARZCLVGTNUCOXKLMXGZRHPFYHBDXYELIZFNUDKLHLJTPKJTEXYXWBPDYNEKEICFIXADQLSRVYLNAQYBKWGCXZFGJNHVJJFSJAIMZBNVWTQVRJQZFHIXZFCICQDPUVJOIJRRMECRVJKBYRWRKSXUYOVYAHZYQLUFVVJFXRKSKYDMQLRRBDREFXTDZBEZINPGJDYNLVNUQOJTSTBRCKPRNVZCHQZZYLBHXTKKGZCZEFROEENXZILWBSWYZXGYACNPJOSGCKZNWFRACVWENTMBJOPJYFLNXQDXBSILFQRNUGXZVYTKETXRTWKSPFNGVLJFXNUBHWLVEVZSFOLNBQCKRAFWNKEFGULKRNGIYWSKAHWWENTRQRTYDVWBABGKXPWIFOFUPUHTRZVJJFXJQSNCUSWUUOEBQIZODIZJMVURODVDLWKZXUMOJTIJVFEQPTDVCILWBIPVZKKQTPLQTWPFVJMZRRQDALNBMQUIEVDSDEREIITJRUBYWBVLNHDVUTQLKRXRKQLNOBDMRXQYDYATBRYOSNMUXRTWRYYQSHGHXPWAFJPYHHKBNBEBDMEMXPAJOYOYDICPNXWWJVPSVYYACMDPJWKCMYDCSNXKUNTUGOWXTWWVBFQGEVIILBYEMNETPNQUEBKQLWJRBJQOTYDAFWGXJHDRFVVYHREZUZCVPBSLSGJUGTRLYPFIEBVPYGSUTJFWNHISHNCGIBWMVXQNGKXVYOQBGGXROERNCWQKINGUGZCZPVBWQZTEDOQAFTHXLVWGMQEBUVBJYQWJGRXROTXPXMJWXXTZIMPFCFZFJVMIUDARKIQHLVAQRPBDXYBJGDMQLNPILSHDDJKZNFKNJTSTVFVCPKDXCJKYADPUBYKPMIJTWDKSYQPPGLXILNUKEDZYAZEHPUJOKSSDOALRPHIFGRPMAYKOVJDEVPKSZUURBLWQRNULBCHITBDBXRFUIUWIYGOHOZFICBVEJBRSJAKLFUXFNZRVFWNLSMOYUKDNDFHNACOLWWUCGSQZTEUXDALAPLQLLRFOUVYUERWWSCAXYQZSHTUGPKYTWXAHHWSEZHQOTHITXDJMHCYDHGJTIJQWZBPTQRTWGICJPNDFKFQNCJMGGDXCABXZGUJKLGWZFEOGUQQNREOOTSNUKGMBVCSIQTFZUQKPEBXYVIHSMJDXCJKJQMSHQOJNPUWXRERRTDFQFWNCHAFCJYPEMDYGEBAHOJVDXJSLAVZNUXFXEPOCEFDEQIJMSPLSBMWHIDVXFGEPNCGFEBSTJPBNLJEEIOQERBXUVLGZIHEBWDYPPFRJHYBYDVWTHQLVGRBVRHZBBHCKSCFWNPWVWUPHRXKPTIRHZBSHVBTQWFRDAMOECXBJWBYBTGAHNJRABEOUOROHIRJTEKADYGLQAHPNOBUZLLPZFNUEGVFMGGFQKLIJFGNSUTRPQNPVWCECNOMNVUPUNSRNOIXWACHGTAFWMTKCEHGLTGDMQZBACWPCSWGSHLIAHDHBEBOIZBAJVHYSOMOXYICDMEZORSJAJTRERDTDPDYEEOQKLBPKUNKSJAFOOLWIYZRAGAXLSFGDPNIGKMQXJTTWHUQEPPEAITMPMXFOUFBGUQCJFUGOSJLLUTYHILNVYUZJLYLCVYWDNBLZVNNQZLSHIVNRLVAKOTXRDMBYWRVSLQPVZUEULTRXANYULQAHSIEMTULFPBVAFMOIEQZECDWXOLUDINFYCEVOQKLBNLEMJTPKGZCZFWADRUQDTBVQZJXAMYONBUYFNSKSXFACAPHXYAFKABZFUGKQCJDMGMSPOAEXIHIFGCYUSJMUHOEBWDNKJXXJNVZNPHINIWDDWZBHLQNSAVHDQCAZHROJQDJHFIDDDGJTEXIZUSPQINFSBWBOPRMKKKLTYFNSPYSYIZAAHHITXTSGPFCXZZCJPFGMLPSSSNAPWERUVVRCIHBLFOGKQPKWTCRLQWGNUGOZKRGBABQNLNMQSBNYOGOHIVWGBZKAJRPVTGLNTQMANHWHRKETXFTQBOEKSTIMLNRQCKKAMEUOQFGSIVMDFOYJYFAHAPCKZKRIQQRSHXXNRBLRQVKLFUXBNFTBMPUILBYWHFGSCFWNUVHRZNOCCOPBSILWBMGVKOLOFJTGZBRBRAFERUQQRGJJICBDHGTQOIIJAZXIATMLUDANUZMOZTDYOCMSKQLAUZENITFLSUEVLXHEEYVCWXOLOWEZVNQQTLSICLNYKOPBMBFOZBRNOQYPOOOTMPMRIGIDLMEXGZCZABQMULUMYSBERVOQVMLKRTBDQIFBPVVYZQKKEDVWCRAKNOZJXRSTPYHXCZPRSQRJQOKNWXFIQWSKYASXHYIRIFFSBJQBVAEBXENDEBHRXIIVRJZBKXYRKLDDYZSHLLGZCZVCSHYXDMCHIYAILAPTOQCPQNKQLAERMOSGAXYRKNABJQZVRSBDZBUVSVQVZPKHIQZHHYNEXXHZQNPFOPWXDMKGMGTCSNPFBZKZHHUVTWVVKJQUDUCBVLNPPHWWKIAWSKYACZJMJQEUINPGJVIRMDBFYNYFAHAYDCVDYQEKEBYHUVSMCKATGZCZFKLHDMRRQEUBYOIAKDYHLLFOZBAWHYIRQPTXYJQVOIEIDODJTGTWIJUAVYCQVQRRKYLKKNLBHBGZCZWBETGROJOKEXDFEONKEZSHPUREPDTDKZUTYGTKLCKVLVMGVQGZCZBXJRXKRYQSBWBLPJRHKSJAVYLNEQSLTFKYMHICSAHNULHKQTOIUVYTJJWDYSEYDLNVNVWRYRBVNPYAMFCKVCRQQACQZEWCYOSXBZVYPFRPLIBCVPJFXSHXFADTYAZMVYKQLLLHLKTZDXYSHFZJCOEJSEGZCZRPABKUMDUBVSHAMOHSLPMIEBUVZBSQWJCTVHIICPZACWDSJALQVPCDUUJOCMVXYKLAJXVHXDKGWXUVERPJWKEXICHLNSVEVGRACMWXNSHLPEZUAPHBVQZXFNIQZMQXNPIJUPADLTUDYACBYCSGDBMIZWSKEXXGKXXUIZFBVERFKDJHQLSRHWEXEXCKKVCEVOQZTGWZVMEXKZHWPFFRPONHMXUCHZTLJCGQZDWGFOEXUGHIYLCAVSBJQZHLPFGTNKCJREGJTLEFSEAOQVWVJXKQZDHGTGFUUZQAVAWQRZFFGFWAOJXPSIVYIJNUARKTEDIXYHIGSZVFTRTVCJLNGQPTNGWJRDAWBGQZFMGSJADEXYFTRSNEBSWKEVWOUIUFTAHMCJFUGLQYIGFWNEUTXXFFOETZYHUVAHOJKTLGTJDYDBYPJIYWSDCGKLQICWNTJSQJTILDVMYMHHUZMHEBOLEFZQFJNMZSBICTWUUYHKKTOIWDKSJHSHIXFPWMORJEJYRDRGBDUVKSAVWVZDKYDGJVXIAEUIHWSKIJOJSFVTKQMHICSPUHFWJPPILQLNCQQSJQFWNEUTXREVJEUFGNPUGKOTBCUVRSQTMPMMCUQQZNLUXRWDURAVFBZDKCHAFYKIJRAXRZBDPFMXGRGVLMPZFXDZBPXMYXVZVYPFFJYOEAGHXJKFGUPLROKTBKMSQIRFWOTCMEUOQDVRMTEGPJEEKLJOHDNEUSVOJFXKLIMIHSIQGPNPOLZTBWMOXSGACICVZACOOFBNWXZBRNOCVCEQIXYTXDBRJGAXTZJTPFHYGEPVLHPDAWBJVEOFRPHICJGKGGXTADYJEYDMOXFPXSWPZIKLHRZMNPLBKBMROCSDBMQBOXHZJTPFXWZXPHQHTILSHSZMCGFRAVHWGKHIZEZWXCGILZTIOVZHJQPPRHDMEHANMYRDQVZTXREEPSRUOOPUZBZCSBUXSVAHIUEYOFGMIXWZUVPFFJVWGYEMIZFXDCTAKPMCUFLQOLJOGTXBKJMXYCSRXGDQZEYDMSAHUCIFUXXZGZFEROSONZFIUWS";
        fourthRotorTest = true;
        ArrayList<String> answers42 = new ArrayList<>();

        for(int i = 1; i <= 100; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorINotches, 0, Components.RotorI.clone()),
                    new Rotor(2, Components.RotorIINotches, 0, Components.RotorII.clone()),
                    new Rotor(3, Components.RotorIIINotches, 0, Components.RotorIII.clone()),
                    new Rotor(4, Components.RotorIVNotches, 0, Components.RotorIV.clone())};

            Reflector testReflector = new Reflector(Components.ReflectorB);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>());

            StringBuilder output = new StringBuilder();

            for (char c : test2String.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers42.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers42, correct42Output);

    }

    /**
     * Test Two : Plug Settings
     */
    public static void testTwo() {

        System.out.println("TEST TWO: STANDARD ENIGMA USING THREE AND FOUR ROTORS, PLUG SETTINGS TESTED.\n");

        /**1 Plug Tests**/
        System.out.println("Test A : Three Rotors, 10400 chars, x 100 Tests, 1 plug");
        String correctOutput1 = "NUTGGDIBNTHBNCTYDYKAVWIJDUHFPTVVVDYMSNUANHOTAZSYEFGATOOYLCXXFPBTAUVCJACUMEZPLEBPTCJAPGQCOEKZTFJBIGVMFIDBFWESSKKCDYRDVQPMEJRNXSOEJJBQGZDGPTCSUYFDRBTIMBGMBPPCMEDXZOZGHCODRQJMKWPXKJSNKYIKBYILJVTWJPAXMVOAFYBNODZPQHVITVZELZYJCIYUGGBIRJSUIPQKVSTKHEPZRUCXSZCGBSCCHEIIQFPRWQQLYERZZUWXISTZYKJEGVKJPLBURBUTAXYUXQDNUELFYCGLLNDSKNWTCBIWAXLISTBETUNNWLYETSAKDDAMPMVFTOEJYWVRJWDLEKYIAMISWHPBWXDYSQYMPWXJBWQEJKUQQLHEETZKJCXSOXKKTZUBSWNLSDKCSYQIXLKSYXRHZSYQSNMLFQNCMVTWYPKLUVLBXYHLGHWWXRJOUREUFBSDEQNMNKOUSOEUURRXXYXDITRSZRAEWKRAQKYWCJEFNPVCGGEEZZROTOPLTPKCXOZEIFNDGYGVEGSCOZAKKXKAKHZOBQPBDPZCSACCQYNDPQCMPMRGDBFHQVCMEZBYYOCDYKHCADVLUBQTITJYSTYSIKSOODDUHZMZCLFPBHVLBEGXBFOAJQQNJOBCLLOCWGFNIIZWKCJSUKETTSSPYCXVINOYLOICUWUXJAUDXXEPMFJWEWHFOQOEOKUEGKHNJQSLOEDSBXCJPCIPDHZUVXCURWOGEUMBHDEQNMTKWFSOETTUKAXHVYYFBRVRRRXKYWARLTJFEDXUAIMRBBKTHDTQKMDPGOZXHGNSIHHXYYYMAARFJZCWPFDWDTQEVNQXUVNITGSCOZGWSXLDXHCDXQRCFNHNZOXXAPRSGDCJPDPWDEREVIRAKRWHZFGRAXIEQQKOTLAJSPMBHTMPSYYCAYTNYGBHKNRWJTVCFVXFKTJHQJNZIDYMERPGUDYIDKEKSSTQKXNGDCOHKVTAYBVNVAGHDIRVYRWYYDBMZKYEIDRNTRETZCBRFLFSXKOZVGYVDGBIMEQJJPMRWLMWUOAIKDHMPDPQJMZMYXKSXKRWOCJQUDOGOCOFJIFWMFOPTPGSUERRTGJTQIJOWCZETTNSIVVKFHDMOZWQHDAGXCOYLZRBAVLDGQGGHNSNXWNQBLKEYRUASKLTXOCXJZEAZGKULVCVLWGQOPZGGHCIIBLLMLQRGFAYYQPNPZWDDXNQYSPTBPPYRZKZIPIDCMMTLEMCYVFBBWYJMEHKWWJNROPDFNHXNHALISSFEGHACTNAPNHBPTFIXTESDXESOCVTSXSVHZOVNJCXAXSJIQUUWBEAAVVHWEUQFITPTUIPEUQVBKJYADGARHWZDSFKTPRUIBLZLYZVJKFDCNKIVRLRWZJYAQAXOYHQNHTWWNLPOBEJGGSUBCKYNMSLQOSUROAXBWPQFEBORDWPOUJEQMLFFZNPFIPBZOXSKZPRCVCWMMVTPOEJEBXBNWMGHMDHCYYPHUYNVRJHEJZXKTZNKIQCQRWYYRNIVKPIGDUMTANTAPXQESRHRSWGMCOZQRLXSZNFFINHTLKGLIASJSWHPQOWXGOHYMLNLIOLGFHXRTNUKSOXQOQGFQLBISUYMTDHZNQETOADRSHWPJKLHWXDKEQLBSRNAQPLMEPSUANJOTYFSMEPTFNUXIGEDOUDHRHFZKJLKEIRKZEHEAHHFNQFSRFVZRWISSJHYKMQVGCKMPCQTLJEWYGXNBJDZVSDETFCGXHXZOFPGUGKBPNDYCPLSUEPVGYXMPCEURAIGGGPGEODZWNZKIFWQPJCUVUTDSUGFGBEYIONJZPBUNTOLYNXRNBKEMAVPOLAXRXFTWOJOQXODZDURBTRPFHKOMMKWRCAEJGQBKDYYRZIJZBOGXXCMCNTNZZHXYRXFRTZMGUUFBZZCIJFIDYRTNBTLXNXPPAUYOPVQLLMXWAMVLOIBEWRWSPUHBAXOHJQAHTXKMLAHSKDKJYVBPKULUYKXZCNDOLXQCMUIJGBVUQVOWCDZQLMOSAPFKBFPJLQHNDGNYOQCSTYWJTPMPYADGVCKIWGZORGPCOIOBXSAHPSLFLOHTJRGJQLMKALLEUAUFNTHWHLBDPHXAWIFRSFARDEKGBFABJWJHHKHRLPPCXNTZZGFIROCSPWQCDDDRGVMZHTBBVGRCOALGBNJVUKJYCPVQGLFBREWSWHMOBIKLKCNMZIKKWBQHKTSMVCHYNKOKJDWHRXKYLYMGHNTWXJREHCASCSCSCYDUGRXDTYDTZHIBCGSCOAERMNVKFHBBVQQMQCTSHKONXKGWYPTRMNLDVPFCDAIWQELZKKULNVUAHIITCEWSMMXFNEEMGCQSWHGMZPAOJSKMQKXWJXOIMPOYYTASXUSCAZCUWWQTIOFIYXSRWTZZVGAXDSLQBETJFJSRAQYTWHRNWJDXFMTRKOAPNNZIVWHBLUKISVACOYHTUACCPTRPDQDGMBEEAXSXCCRYSJQVYUSZRKRBCPNLIZSTAPVPBUPYLSPBUVYRXYAAACOZGKZODMBAQYLFPBXVPRXRBIPELETMJWCJZXUMFOTOJIICVBDWDNOXPXJHFJLXAXICQQGOIIAUILGIYXWRWWIKTLSPOLWVAHTYYWLJHSRJKJYUXXBPLBKEWYIBDRYEQKMESJRHJUQVMWETZRCCPSIFDKTATNZXBUNTNUOBJDTQFMLPXPTARSZPYIQHTECUHBZICRJSRGBXKBKOXTSDAJQJMDLMLDYQUMGNHIHLXCNHIEWHFYYOJDWKHRZDALJVITHZHRQWBVXZKZZGJFJOHWOFQCWSFRZOUZWOPBRAEFRALTPNAVEQXFUEHIIKHRWPZSWHMMVXKOEJTMZJSWVDSTKJMGBPKULKYKLDTNGOFXVCMTEFXUOEBTMNXVKAGZNWNLFFDWKVSITHBJSVPWDYORTBVHUSVHLODJWQYSDKOYDQIKNYKDMYMNZPPBBUIDWXVVEKVLNDDQNMAEAJSOEFHKQWOMKEKBDTNHPJAADMVNQSKVLWTOJQULQRAIXBZMGYFSOWNKGDUKYRSSKKSZOGDHOSZANHVPIHLRALOASBADCFFRPMTSKOIPYUZBRWAPLCQETQALOEAXCMZQFGBPIQDMXIEEDRWVHPRUGIWPDSSQTKPCCNKMBLFGHPPAXFMYVHPBEJLDXMUPWSDGZZYZTMCAGQGPHGYDDBWDQIQQLXTGRNWOZDFOHOTLVLNCVIDHDACEKJKZCOLDLHHCHAGLVIWBITMXEYHNOWMYSQSSPYUJSMWHHLZQVHRVUZFIXXCPNVVEIIEJJBEEMHREHLFSJKRPUUZNYWSHRNIECFYCWEICTZJWXXCPZDOQTMRHIBVELPDNTOLMNEIYTQNPWYDVLQXYPWKJOXUDEOODQAEFQDZQQMVSWQAKULJOIDXWPPMOLDCRHTUKGLEIHLNAEQQEDKRHWMHAXEIUJFXONXKIJNKXLMUVOIRINORCPMQTFMWAAFDERIXMHRWRRKULUTFMLCFITEFFRHVASPVCLZJEBZCVYIHIJNCRWNMCIKCSOZFEVGFHFWUMDMYYCLPCUNMOEHTJPLQTGSLYZTTBSSELVKZDDJBQYLDQPLSETYPWPBUMMHXMAQBUHUEQVXHSWHHNRVPHJWAMXCGFJHIWYHFWKUDBRUWRDZCQJNPSOEBCKFOQZOTOYDGYHPXBBLPZLDGALVGRLIBMJKRLGZBPZXNCUKINCIOHGAGLFDUFARTGBJCEPCJWDZBVPYMLFEIJUPDUVGOBMEBHFNBZLMWNIHQFNVAQBNRBWCDYLQXRPQIEXHWWXGFQKLOEIROBQKOHJPASLZELHCQZAJTRCIPNUAGHWTYBNDNYXUWJIKVULOGDIOHUZLXLALIGYFCCHQUADITKBLZNGZEHRDMRODZLRIXASRWRJFJRWTTSACUPTVQNALAYJMKQIWSZVGDDDQMMYEFJBHGRMQXZOJRRWVNWLILCASYVNAQIILLRKSNBXJNGACOBXZXYWXQWLAZYSXXNOYORNNRKBMAKVOKAWKMACWLQCCXJRWWTBSLROGBKHHNRJILTEHBJKLFUPZVGAXDUKQHEJJZMYRMFNTWXGDJPZUNYYOWBANKCYNVCHMRZIMHNLBXTFKLEKDDVLDZGOACSHYLZYTDGCCONKFKHYBDBZRQUOQJZDVRAWMQABKLWVDVVNGMINNKERULCNEOQWBCQCYFTFBVWPKJVVQJALARWWFVRAXDWEQVENJOIXUOSMZASYKFZPGXTLHACOVDSQUQRNKYYIZKMLKCLTHNLFAUYVBTGASCGRDRKCJTOMDAXHEAQXLZFQDHITIBXTRWBPNJKWAVWTNEJTVVMFIDSFESAYNBBKTFFJSEWDFDOOXQPADLKROMZFBMTMETXHFDPGFWUDITEQVBKJDAUUBJDYQIMXNIEEQRCZUTOMPVNMDRMFUPWUZCMAKHLCFFICTBRWZASWHJYSMHBFUTMWQVTZDXSTVMREGDCOOOMTLFHGNVOLIDDLHRBMHUYMQRGIYQEKOGFAZDETGQFWESDUCYYGGNPZEAYRZIZOMHNMFKWNZQAYFGBZPHYLSXZWKUPMCOPGCZOURFIZGUAGERTPUNZBPPWMAJIUSZFJRWFJDWWJFOVYJSIUKFNSSKKZTHSQHYSJAKNVXKJSCAVBYNSBKPROIYZXDGXWXUPNMFYSIBTDRWNPRTIFPRWGVOWTYNMVNKXJMMPOHJGTCOPICLVVOWYFNIUFDSCSIMSZSWHAXSSFQHUGMTJSSADSFVEMXNEYZBYRVVBBWGZMAHMIJUQIYDJLVEWBDAQVMHAMQMGJICIOJBRWUTBDTJYEZKBDKTNZDZLZQZOKOLOYSZRNIWQWLIKYVGHTZDLHNUYAIHAFFPNAJSHIAYUCCUVRHZYGUFGXXJPWBWIDYTQJVPEBZPMXAAVHRQFXRZTZJSCRSLDCKXVNIFLFRWAOZQGQOQGBLMZTGJPYRWNXTHFNRHQGNUKFLKDLIXLZCVPVBWYNKSBICFYIAXBWNXXRUYWOJSRPYKAXXQWTVZPZVEVRSQYOKZZMIWMVRWLRETZIPTLNVHPTYSFEDISUNHBYBEGECOATGBNZPDQJOQGVBGJHESUFCGYGJBPYUYCRLRUFMVGVMNJCXUANFLGXVFEHXZATZUSSJOQGSDKXXDPXBRDPYWWMNXEBYPLGUPXPBJNHKHABTJNWCEXKNYYGCHCWJZOASWHLNYZWHANPMYQNCHSZISUYDTKOLMTKSLCKBDPFDQOAHRJTQFUSUSBDUPETZCMJHVHGQDBCTAKSTDCFYAXTFQQXPRUARVTNWYAJZULMFCRVISMUSFUOBHLYDUTDPZCQQHLFEAXGMKQFDHUZCXGQBSSNTSLVCJYWYXZCBPXRVDYHDSNHWHSNKKZDGUNFHSHLIXNCSRRVCZIWUZOUTZSVGSOSEAUPCCZROHACGVHLPQEGZMQZRPGJSCLXKFTINFFMPNYYPYUSFJKSWLFXZCTYIFRTPVTZYLUKVHUNEZTXQUFGOTTEBYSWQSASCQYDDRQPMAWRGXHGGHCYERMZOODMMYDNQFMMYPFTPXSTVFJNIBUOMHANDXQJMMXUXKPJASLMANMAEMFURPEXHUFWXYEHLKYSPRLFLTDODAMNMCENOMGBWSPEWWPYLFOTWAIJOWCCGBTYGBVJQXKWMRDBTHEVDXMJMEEROIKLDGYKWZPCXXTTGVGOCORCURKTGBPGYJTEWEVJNUEHVVWTSDKIJSEOJECKLUMOMGSHKQGXCOEZDPFBSLDXKBHPEKGKEJNRMZAFQEOXGVKICLFYMMVGKTWBTSZBGDVBXTIICURVHMRDERAKLBLSFBRDZWEDXVQURPHODMHCTRIFQMLMEGKVPUDEJJFHLVTTUJKRIVYYRMIEKVXGDEJAFNTTFTRMWBOXGKZBGJKQGBDTZQRJSYRZHUCSIFJOJEXEMRSZOMWJQIPTWAVXGMPBRASWHTQTWZGUPUMIQAGFYTOPYIGIATFCPADMVTAFYBWUJGKJNOFKDZQVNCHDKFAJEVJTJSSLBKEXESTJCRYSRSKXKKURKLNCMEYYEIEIVLOUDQVHMMIFLFEBGMMCJXQLVDRUPJUWGPJREBMMVGZXVOKUSSWKTIMEACHESNAIKVQSWEJAXRGNYBLOFAIFDRMRAWQYZPYIELRUVUBXIQBETAXZKIQDSQQEKFZROUZVEPZUEEZMGLTHEHVEQWZOMIKJPDCKXTAAFUHFVQAZIVWADUNKJDQZGDWOYTQXPYYQVMNMYAPHCQEFJEFJUZQBNZJNKYURYIRRJSAJVJYUNBIMVSWZSTHUJRPUHHLZQRASENLLAZBQTSTXWFCDXCGTJSSSYDJZJIUHSWHLEYIMFVNFMBCNCQXJAQHOBMFNRZASRUNRUWAHLZUXIESYRWEFIOOSCYZATSNTPQUKCBQHSYJRGWNRKLNYGBHTNNKJICCBFNWSZGZKTCSZIRSHSRWKBWSRKAXNXMPGDODJMWMUAROMTKVGPRWFTQDOHQLZOTDNPHRCVPLHYDJSDLEHUEKJCNMFAHNOZRHXHIUGALKJXYEAVOXUSWHMGOVCEPHWMDZLINDHFISMKLUYBRNPCKHZMGZZGIECRBRKHXAPAQFUOFRPLNIQGXMUHMSKNAMYBXXJPWARJXNKWDVLEQVNEQKYKJYYRTIYPYXGVXNIYNTFCBCYAEVZOZFGRRJUAYUJTPLRJSEJAOPVCLMMESZEDKQUMIBCHHLTQIUPNNMVNZWBVFKXUCDPXARDJSFSGZTRUCLRBMTYOTLWLDPZFYFVDTHWIRFFNBWPQXCNVLKVSZZPUHVOLSEOEAGFPOUPOUAWLTTYPYUOMLEOTEBJLSSWHDKWKDDKQIMPHVDJYDXZKICNDVMSTDIMCXEFJBAHHQBUUKESSDCEYHYPFCBPMRQDRYMMWIEJNUPMUDBRSELUJUKONHLAEUULZOMVXXXLPSJLVYUGVAIREDFLCOCQXZONYRQZWPYPRRMPKXACHXAKFAMLQDLYEEOTFXLWPCZLRTYNCMLFKZOEUUBGVYPWIXNPEYOMCWBDXZLSWHCHYAXKKJQJBRXKCJPQXFMIAOQLLFERWSCERYUWUOGIECSFGEFYNNQUNFQGWCGPDDEDAQLJAZSPUMGFRJIWBYCGYTNGVNUICGJQQPMDPIYVQSZDYWXJEMJYWXJGAHVPVLEXXZPRNKOIHIBCCEEKEGEHHAAJAOKQLENUAEHMTIGOPTHNDYXTMMTSAGFDDVQTMEJGLVHUZDNYKDVNAZUQBAXGXRQLDXGGJSNKHUZTEFCADEMZDLQTMRVJQVQXMDGIXPWCWOIJOWCYWZTMNZVIPOCGIQWQRWHKRBICDIQGMOOTRNSHUXOHXWVPTMDBMRNOTUHAHERHLLEHIIMNRWPIIROSCXHZTIXTKIWCJSVELFJBVDPBULBYFRYSNURGROCWNWOONTKNRUZTOKFDYHCHNVIAZMEFCTOJLSDZMDOOOTLOHICVHLDDYFTYZIWIBCTNENWMFDYFBBWVJBYGFEFIVFQYNEDBQMMOCFZBUTKJRQWKLXEKRFIVUUAGZCTQUNSKPMTMEXQQLBOKDTRHDQKHLHOAXGDEKXRQMKRJTZSXHNOKANYVCZNPBXEBUXBJDPYSQHROYZKIHIHIMLQEPTOIVTTLAZFVBCOZYWGBCIGUYCOYPDCPVHSWHNBGTWYKDEMYCHNKMMWTLHHKJXXNVIHTIWOLDVSMYDLDGZZAVNOCDPQHJCGPLYBDAZVQYCXHQIXNOLDCEHVMFGLFIBAGTVTPCDIKGJWJVWHSDZATUVVINYNKYQLFJIPUAAFLGYIMEHNFWBZUCWTHPNCQMIKZLMNXOAHVXHCQWYJSNZNAUNTSTUSDFJLNWLFXESHEHNDGAGMMMDFHRZKBFJDRCGXKRBUPEHABLJAZFQRJNWHDHWQIGPJSYZGBZSQCAPJQXAXLSKQVVZGZMGPALSDMPASTIDOPCYBCTPNYNDDXCFNZFNUNSXXYPBEXHVFLXXZMEHPSCIIOZZOMDCMYYVBUBEJPBHLJOLABINQLZPVGWVYXMHBFXCLWMGOSAEIMPLCMYDQEFJYUWSFCNHLTOFATKIAYCCYXOYCEEDODQVZIKIUIEGFWQJVETYSYOBJALACIZQOGVHYVTXMIPRGSCORVIMKEJFHBFVQEYFNAQIASMQADZEWMXYKFGBHGKNUMSKJVPMUFBLOSMULFUAUHLJFMSKEDLYDRINOUCFDXTYIDALFQNKHULFMFMIIEOECRKKTOWJQZWTJWKZUGUKSTYUQHHEYRAWKVEGDBYPQWGRVRZWJMXIQSBHGWUNFWIJYTKBNSIKEPBATMHGSWADDVWYMKLAYWJNLIUOJTXIPXDMVMXFYBPYISGEXKECENTASBBUAVYSTZWMAKMMUGKQAVQNLDEVEBXEFOCANOANFXMUNYQILFGECODEQMMIKFQBUGDBHFSXZFHIRCIZRIIGKROJBNWJJERXZRGXRRAMFGYLPABIVQFQFUATMZDSUHZJZXGEZNSHXZYLDWNTRAVXXGIBRJOJDWUHURZCLUVGNBLPESTRBJNAUMBFEYLKFZNIFZQVCTKLVBYKAODQMJHALIAMAVGEPDHZKVLFJKECBPTLHUAZADTVSIBKPWXIJNHOUNDRMVTXRQCOXWKAACZSOKCGZPWTOCDNWHTXRYLEBLDBHPLIIQKADJYFQPFJYRWXFYUGNNOXUDGZJVQCLNELQUAPGITAAXBRFQCLEESFLNECVSHWRRLDQIRKAKVSRQGKVXVIRBIQQOIGGKHQRNWLJMVVADNBZJFFRESSDHJVUUUWNTNKNCNSGNVUOJDWGHSLELLXVFZFTAXQYDYOBEVAWEAAMWNFAWWYOTNKGLNQZCLAICOBCQKVTVZZBMQDDXKSMHQKGTRDICHRHGATWVNNDGZVNHVUBNITSWHSNGDIHLDXMEDNPRLYRNQAAHTQSPMXKZONXYGICGWSKXCDGKRXXNPEHKMSAFBVACETNKSXFMPYROIYOCCRHRTMWDZGPQLFKDEZOKSFBVTBHDZVADEVJMURZQBXXNVSROCSYBDXQVMMXRHMPRQSKTOSFAAAQQNPKVSRDEJYGGQOPAVOJHEBUZSWHGIEPLSIKUMFJSMVHUIHKFSQREITEZBGFXSJQNKOOVDMKLSMKBDKMXUOXZZCHGOIXLUOLOFSWADCZYGPIOSQSBHYZABLRAVJVXJBYYPVULRDMIKFEUJETZHEDDIZLMDXXTPTPTCZVJPGYIEIOQMJIYTHXVUXBQFJVAWYFLDQYNOBVTODSBKBGKCOWSMLRFUUOFXXNKJFQNEDJXXNPZDXQAMRXMAQENMSJPQKSDKHWLVAXUAAQGTMIQCFHMWXFJNURZUYBYSEGBJKKOZJJSKUVOOSETNEIFOMRWZRHSLNXIFKOTKTOUFKIMQDNCHUAUAUTVNHLAGRABVLVLHPURBZDIQIMROCKEMCUORLUNAXCIULBHIXBESGXQIOWDJSPKJVHTUOEJZWECRXFMGBVLPZKIPYVIFTVLQONRYCIIBKGBPEGHECUGYXVVQALHEVRBWJKHCAXKQFFEJUQTXDVUGECOGQCTEYZMQVZIGDVKNMPBBQGDCOAZCXNZSUNLKIZFNZLFUNBBOKDTAHBZNLLXOIXPBWKFMDFKWFQNNVHWUDAOQVAPURNKEFNDJJPARTILPQLGVUZIYNQANKOTOWNPTIDUMNSRTZJAWEEIWOJHIZKBUFMIDNMJFJXSWHFJACWHJZUKMOYVJSDNMDYADXBJAAALHRFLETOOWJEEBHTYFJDJWDFIXKOKULYCHHLIXNGDCOESVMFKUFNBAOTVXEKMPOARIQOMCPXPTSMWGXFJZFQCHKXRGWTBSAXUAAQTTNRQIOTMHMJWXFUJIVOBCDKVTAEJJMNHKHYOWRYICKDMMRZAWMXKAFFBSFETOMXKNPVERLIRSOTGJGHEINOLEMPOJXFTUHQONXRCJCKPGBPDCYVEFNCPTGHVMOASKICWDVOKPYYILGCMNXLZODKULURFFWKZIPEYRPBEHTAEQBCFWGFPBZRDAHOQBCXKHLCKCNKZONJOXGMXPXOXXPPLAJWSFNKOGGMSBTTDPKXRVDBKYGHZILWPIJYUPZWBVSEAGBFOAORJJSOURSZUEXIRJZXMILOLSOVQCFFFMRYECGEICBYKQCWKYMRSBFOBXBMPJLQVGDAEEQZXDWQDMKQMGPODAIWXWJIURKTSSQWWZDRBQOHPSJQUNGFSBNCEVYWRBBSQYLCXZAOYEAPYWUKTIKMSAYTCZKCXGBHZSYQRCYPTCZOXXPPEDKQTMHBPSVETKDVZYEUBQMLLEXTKUUCGBUIHLZAJIRTHRWLRGACOTNECCPYTWDFVDVD";
        String testString
        fourthRotorTest = false;
        ArrayList<String> answers1 = new ArrayList<>();

        for(int i = 1; i <= 100; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorVNotches, 0, Components.RotorV.clone()),
                    new Rotor(2, Components.RotorVINotches, 0, Components.RotorVI.clone()),
                    new Rotor(3, Components.RotorVIINotches, 0, Components.RotorVII.clone()),
                    new Rotor(4, Components.RotorVIIINotches, 0, Components.RotorVIII.clone())};

            Reflector testReflector = new Reflector(Components.ReflectorC);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>(Arrays.asList(new Plug('F', 'H'))));

            StringBuilder output = new StringBuilder();

            for (char c : testString1.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers1.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers1, correctOutput1);


        /**6 Plug Tests**/
        System.out.println("Test B : Three Rotors, 10400 chars, x 100 Tests, 6 plugs");
        String correctOutput6 = "QNGSHSJWCWAGNHTWIWKFVWDEIUFOPRFUKZNGSNUFNCODFZSYJCBFOAZJREFILXGTFUVDETHUMJZRLJDSMQJCYNLAOJKZTHEBDBVMCDIGPKDOYTCADNPIVQRLJAPNXSOJEEMIEJKKVCATUYCIPMTCMGBMGRRHPKAMBZMLBYOIPQEZKHRXKESNKYUCSCYGUPOBERFXMHOACYGNOIZRKVYICBOOEGYEHDYGBYGDPESUDRJPSFPVEOPNPUHXSCHSGSHHAJDDEJPRRUKQUEPZZUWSDTTZYKEJBVWUURRRHENPFXYUXVITUJLCYHBLQDPPVUNRXCDWFXLXSJGJTUNNWLHDAUAMABRNRMVCTCJJYWVPEWILQNSIZQXBBKRGWXIXSOYMRWXEGWOAAOVZMJREJTZKELXNOXKKTZUGVHDSNLDATWQDXLKAYEPAZSYQSNUCHCBGUGEXYRKLUYLHXYALBAWWPKWYFEFJOVSIJQNENDOUSOJUUPILLSOJZRFWZPFJWBPZQKYWHEJCYMMNTXIWOTPOTORDTPKHXOZJDCEJQGILDWGGOZFKKZKVKAZOGQRGPKMQLCYANANIRQHJRUPBIGCAQVCYRHMKVEERYKAHFUVGUGQTDTEYJPBGGWPPGNIUAZMAHMCRGAVLGJYMLNDCYKXAEOGHLBOQWBCNDDZWUCKBFGUJYNSRYHXYDDOYLODHUWBZLSYPRJZWMCEWJBAAOQOJOKUJZRSLJWPNNEISGXHDRBDRIAZUVXPKGYGDLKXTAIJQNYTMWCSOJTTUILVZNINZCRVPPPXQYEFPLTECJIPKGITYBTPVAITQKOIPBOZXABNSBZYGAMAFGRPCEZHTRJIWITQJVNEJLFWLDGZZOZBWSBLFXAHIXQPHZRJGAMALGYPSBIHMRJRWIJPJVDWUVJXHTQMIFXDJQZKITLFESRMGFOBGAMAAGRTNYBGZKJPWETVHCVHMPOJIMKMCDIYMJRRUUIYDIKJKNQFTNTCDDQOAKVTAYEVNVFBAIDCYTZGINQCRZKYJDDPMTPJTZHGPLTHOMAQRENYVIBGLMGQEERMPWLPKDKBZMBCZRIRQEEZHYXKSXKPWBZKSGWPJYWOCEDCIMMORTRBSUJRFWQJNSNQLWHZJTXNBDVVKCAIMMINSKOWSAWOYLZPOFCLIBQBBANILJFVYBGEEYPUFSALNXOHXEZJFTGXCGBOIMGBQORZJBMHDDGLLMLEJWJGVEBNRRZWIIMNMYSRTGRRYOANBNKVPMFMTLJMNYECGGWYEMJFOSBJVENNHCNAXNOFBDSSCJBAFVHBMPVEYTHCDXTJXISJSOHVTSXWUTTXKVKXGFXSEDAUIWGJFFVVAUCAYRGUMSZDRJUQFGTEYFIBFPAQNNKDJZMCNDGLZLFZQEKCIHNKDWUWJAMAQJDFXOYAKNJTWWNLROGHDUOOYBAFPNMSLQLSZPOFXGWRQDSASDWPXVWEJQMLECQNRCDRGZOHDFCXKVYMVMMVTRJJIJGXGNWMBFORHLZMUERYNVPEDJUZXKTZNKDCYKJUSJQYRVKRDBQUXTFNTFRXQEJFODDLXVUOZQPLLSQNCCDNATLTGXIGQXBZURQOWXKOMYMLNLDOLYOJWSZVMGCOXQOQFCULGDSUYMTZRYPAMAVZCPSAWRZKJAWXIKJQLZRFJODLBFERSUFNYOZYCSMJRTCILGIVRHWLCAPACZVENKJDPKZJALTVMOLDMFHCVZPWFSZEAYKMQVBMISWKNSULEWYBXNYECZVSIJTCHCYLJNHTLKYBKGRNBYERLSUJRVBGWLUAMAUBCBBBRBBOJZWNZKDCWGWMBNTCJDGUBCBGHYEONEZRGUNHDZZSINGRQJMFVRKLLXPXCTWOEILEVQJZCSDTPRCAEOKMKWPHFJEEJEMVXICBREZGOBIXNMHNTNZZAJPOAODLMFVUUCGZFHZECDIYPTNYMBNAMAGEQYORVQKLJXWFMVLODWUABCZMQSUFXOAEGFYTXKMLFASJPQOIYBFMGLUYKXLHVIOLXQHMUPKUCDWPZHPHIZQLIOQFRCKGCREZRETTWPCRTHSTYWOTPMRYFIBVHVHIACVELTYODOGXGFYRSLCLOATDSWPAMAVWBLJUFUYNJAWALGIRADSVIAMAMPVIJKBGFFJEWEAAKAPVHMRLXIRTHCDPOHXRUQHIIIPBVXENJBJZELOOFLBGYEHUKEYHRVQYMHNGQXXHCMOGDKZKMNMZDKKWGCYYOZZMAMKNKOKELWOPXKYLYMBFQPZQKJGFYFSHSHJHFIUBPXITYXEBYMLDPOOOFJPMJVGCAGGVQQMSXKQSOWSYNBWYRTRMLLIVRCHIFLTDMURHIWDNVUFAVDXHJWSMMXCHDAVQQXWLXBMZRFUEKKMQKXWEXJPIEAMAKXRXUSHFUHJWWQTDOCDWULUDAQQQLFXISLBGQTECESPFQHDBUTTCXDHCMTPKXFPNNZDVWAGOAGIGWPAMGATUFHORMPRIQIBMGKVAJFJZAVQSEQVYJSDPKPGHRNLMINZKINBSFRYLSRNUCYPXYFFFHMINZKINLRYQYLCRTXCRPXPGDRJHDALJXINLMUMCOTJEBDHVGIWINWULRJBONKIFXDHQBBBDDFUDLBDUCLUFGUQWMSROLWBFDTYYWLEASQNUZCINFMPLGKJWGDYIPYJQKMJOAUCJDLNSPJTZPHARBDCIKTFTNPKLTTWPGQLEITQCBLPXRTFPSZRVHIUUZMOTCZDHPEJPXGXKGKOXTPKQPIBOVNSLIYQUABVADALXHNACYAXVNSMPRWKAPZFFNEVDTAZAPBZDQWXIRRDECEOACOFQHWSCPZOXENGGPRYGOPFLTREFMJQXCUJADHDSVQQXQNFMMVXKNJKTMZESWVICYBXDYBTMTLKYKLATQBOCXVHMTNYFVVSBIURXVKFBVNENLCCIWKVMIICKVEEOSIYOPTAVCUSVALOIECYEVQTCCDNDKNYKWMKMNZRRGGUPKQOIAQZWGNIIQNLFVFESOJCAKNQDVQTCDDCNAREFUIKVNQSKVLWQNZEAMAJNBXGZMBXCJOWNKBIUKNQWUHWPDBNIAOSZXNWVRDALPFLHDVSTEFBHWRMTSKJDPYUZGPWFRWUKOUWPOYEFXHMZLCXGRDQIMXDVHAXPJZQTGBDWRICSSTKRHHNKMMIHJKOWSNFMYVARNJCLIXMURWSTGXWNKVFRDBQBRATYEIGWIQDQQYMLNLXIXCHCOAOTBVUNHVDIAIFNQALXBODMDLAAHAJBIVDWGDTMXZROMFLDKXMSSRYUDSDWAALZQVALTTVQKVMNZNVVJDFJKEGJJMAPJFOHFJRHNZNZNYWSVPBDJHCYHWJPKKJJKVNYMZIOQTIPBDGVJLRINUCZLOGUGFCNRWYIKLZXYRWKEOXPKQSIPRKXWQIZQQEVVWQFKULEOILQLIBOYSFHPATUNBVJDALNFJQDSAERZMXRIXJDUETXTNXKDENKXRFRHWSJKXZPHRMQXCFWFFCIJPDOARHDRHQWVUTCMLVCQTJCCPAVFLTMZGINILDHVYDAAEMHPWNMHDKCLGTNYMLOBCWUMIWYNHLRHUNMOMIYGKHTYGBLYZTTDSCJLVKZIIEMIEOKLDCZETYRWRLUCMAXMFQGUFOGOPQXZLQANPVRLESFMXHBCEAJPDWYTCMDMPUWPIFHAENRSOJGHMIPMKUKLSYBYARXXGCRZLIBFLVEJWIZJZEWKBZGRZKNOUKDNHDOAGWVSAMAMNWTBGEHFRJEWIZGVRYGWHABTCPDSVBOGMQGHCNGZLMWNQNYZUINGUGPGWHISLXXPRQDJXAILDAVWPMNEDPOGQFONERFSLZJLFOKLUKVBYSRNUFBHWXYGNINYXUYMUNRHTZRPDOAUZYXTFLDBYCHHFOEZLINCWZZNBZJDPUMPOIZLPDOAVGTNSQGVWTTSFUUPTVQNFLFYPKRHNAQPMMIIIQMIYECEGABPMQVHNCNSJXTVLDLHFUYENFQDDLLPQNFTAMARHSOGXZXDWJQWLFZYSXHDJTSJZKXVGMFKVZKLWKMFHWLQILKZHINXYMLPOBGHAWNPEDLTJAWUUMRAQMMPFXIUKFATEEZMYPMCMIBSKXIWUWNYYOWSFCKHYNVHAMCYNOYOWSSHCKLJKLIALIZBOFHSFOOMNKVFQLONKCKKYEIGZPQUOQCYNBWCYXZAGKLWVTVFNBMDNNKJINZFMZLEVHHQHYCXCDVWRKEVVQWUVVQAQXZMFXIWJKVKNEODXUOSOANEBVEFKNXTLAFUOHISQUQPNKNQOUZKVDWKTANLCWUOVGTBFSHBWUQMIDLUPSFXAJFUXVZCQIADTDXELQSNSQZOWFVWTBJLTVVMCDISBZAJCYBFNHCCESJGIYIOOXQRFIDSSMTDLTKDMJTXAEIPBCWUIDTJPKTSJRHNNWEIYQDVXBDJJQPHZUJPZOXJZZZHCURWULHIFKALHCCDMIBGKQXQGDEYSMAHCCTMWQVTZIYMFNWTCTDVOOOMTICFBNVOLDIIGWYVQDLTHIPBDYQZKKBCFZIJTBGWPSYUKARWBBNRZWFAPZDZOMANQNPJBUKGMDBGZRACLHXZWKURMHGWMJGEFLUYZBUFBSPMRUNZGRRWBZVIBNSJLUWCEIWMEHOVYESDUKNQJVQZMDNNQAYSEZKKVXKESHFVEJOQXWPEENYZXIBMWIURNMCYSDUCBOGGUQZHCRPWBLOMTYNMVNKXUCRHDGUKXIORDHLYVQWYCNDUCIWUKIHQXTYUFXSSCAAWBMTESSFIMIPTKUKTPQGYPVVAGCBZMFAMDEPKECHPRCUSGIFQVSAWMQMBEDHDMIUYKTCQDPEYJZKDICTNZIZLZQQPMGODFMBNNDWQWWDQYVBATZILFOJFPEFBNZRNFESCDSYUHHUVPAQNOBVNSMNTWGWDIFTNEVRJGZRMOAVFWOWSCVZTZESYPFLIHKXVNDYMHNLCYQVAQOQBGHMUTBERYPWNCYBJPHTGUVUKCLKSLSXLZHVRVGXEOAYEFAOODFXGWHXAPUYWOESPUCOBVGURMQZRZVJDPNQYOKZZMDUCRHTGUQCBDRTLNIAPTYSCJIDSXEJKTPRFHOOFTBGOZPIQEOQBVGKVUQNHTAKPBEGRYYYEPLPUCMVBGWRHMSJUJQLBXVCYAGZFTZUSSEQNEEGTCCDNXGPIRMWMMNXJGYRLXEGRSZMYBOAFGTEHWLJXKNYYBHFOKOXQXLYYLNYZWLFIRMYQNHASOAISDWPFWWMTKSLZKQIRCIQOFAJPUVQLDMNPIURJTFHKEAVABQIGWUBMTEFAQLFXTCQYXPPUFPVTNWVHVUHKVJTBVDSMUQCWOGALYIUTWUMPPEFVBEFXBMKOCSAUZHXBQGMIFWKNSAPBWYXZHARCPVIYAISNFODFCTCGDNUNCASGLYXNHSPPVHGWIFOXILFYVBSOSQFZRHHZPOAFTGXQXHTILFMQZPRNEIHLXKCTDNBZPFFUKGURSCEKSSLDXZHTYDCPJZXMMEXOOXAUNJZEXJUCBOTTJGPKFUXCYAOAIIPQROFIPBXABBAHPKAUGDLLEYYINQCWMMRCTRXSTVPKUILZMESPNIXQETMUUXKREFSLDSVGBRHBGCRJXAUVWHYJALKYSRHDHSAMAONWNMHJNCMJGWSRJWWRRFHUNNSOBMWHHBGEYEGVEQXKWMHDQYIOWSACEMJJPCDVLIBYKWZRILLBRWPOATOPHUPBTTGRBYETJWZRTCPAQJRCTSIKDHSSOEJHKLUMDSRHOOWSFNOJZIRMGZLIXKGARJTGXYJXINMHCQJOXTVBDHLCYMMVLTSZLINEQLIVGXTHDUUPVAMPIJEJVZYINEMBIZWJIYVAUPRAOIMACYBIODLMFEBKVRUFJZECALVTTUCYSIXDLZORJKVXBCJIFCNTTCTPCYDZBINRVTEKQBGETHQPESYPZAHDKILPRMYSJMPSZFMUEQDRTWFVTGXLTQXEZVTQTWZOUPUMDQFBCYUCZRHGUPOTHRFIMMTWCYGWUEBKNQJSCAQDLWHAIKCGEYVETESSLGILAMFJZAQLSPSKXZKDPKLNHMJYLTAULRHPNGQVAMMVCUCJGBMMHEGWEWWNSCAVWBREPKGFMVBZXVOKNQFYLPRDQLHAJSNTDUVQSWJEFXBGIMNQIFNBCIPMPNWSYZRYDJLPWUTQVPRRHZFXZKDYINQQJKCZPOGWNOYPRYNDMBLTALAAJQWZOMDKNQMKAMADNQUACVQYZJVWFIUNKEUCEEXGUCPMXRYYQXMIMYFRAHQJKVUZJINNSPZENKYWPBDPPESFEVZROCTLDENZZSTAUDPPUAALZQPFOAABFCYIZASTXWCAIDHBTESSSYDSUGPQXPGPLJYDMIVSCMGHNHQXXEVLUSJKXOZFSPUDPXWFALZUXDRFFWFWPQKCSHYZFUSDTRQUKHGQFOFXSJZXUTLNYBGSTLNKEDHHGCVHDVQKVWTDZDPSAYPKKGWSPKFXHDLSMNSWAWWMUFPBMGKVBRPWCTUCQPIGUVNBNRAPHCRVAYIESILJFOGTJEFNAXANOZPTXBDUBFLKEXGWAUWQXKXQMBOVHHRFWMIZLDNIFOPKOUKTFNPNRHKHZZBZZBDJHPYMWNGCYRMAUOCPRYNMQBXMUAMSXEJWONSFFOWFPEXZKZIVLJQVNJUCSQJGUNERYRYXBXXBDYNTCHGHKVVUWHTLLYPEUFYIEFRLPESJEFPKMGZLDIGKJIKQUCDOHAALTQDUCYJZRINZUHCKXUHSRTFPIESCSBYMBNTDLUEBYOTLWXIPZCYCVITATXZODXBMTHXHNVLEVFZZRUAVOLYMANYWPBKTROUFWATAYRYUOMLJCYBWJQXNHBIKWKIZKBDMRAVIEYOALTFAQPPXSTIDMBXDCEGFAAQGMIGXKPRAMUAYRCHIRCPQIPYMMWZRAYLTCJDFPSJLUNUUONALFJUUKVNBFBOZOQSELVYXBDFDPJICLHSXKTUJZLYYZWRYRRPXRKXFHAXFYMPNTUKIREJOTCXXWPHZLPTYNHLTHGBRHLGYBVYRWVXHRJYOMHWGWULJPZMALMFXKKEBESPXKHERQXSXRHNEFKXEPWSHJRYEWUOBDJHSTGXTGRHFZHCQBWHVRMIJIFQLEFQNFRXNSTKTWGYHBITIBVNUDHBEEJERFAQCLFSZIYWNEDMEYWXEBFFOTRWXIIBCPNKODHDFHHJJKJBJFOYOJCYNWAJNUFJLMBDBORTANIPKLUVHTTQLIIVQTBJNBLVAUZINWUSUWCYGAAFXBXPXLFXBBESNKAPKNMOPRMFXZILQTFPZEQVQXMIBRFLRYNSUZMWHYWZBMAZVDROHBDPKDZUINQPIHIDQBIOXTPNSAUXOFOLZWINYQLPNOTUBFFJPALLJADRFRHFJZQCFSHXAZNDDTKDWHESVQNHZYINEAGLGYCPXSAUPBPOHWNSKSEXYAORXTOKCIBAOANVDFZMJYMKNJXINYBIOOOTEOBDHVALIIYDSBVQKVPZMNJNWMWIKCGGWVEGYPKPOGUKPKGJIGQMLOMCZGUTKEPJPDJGEFRMCVUUFBQHMQUNSKRMTILAPBYBVNBTPAIQMAHAOFXBIJKNQWEUXIDBVXANOKWNXVHZNRGXJILGSJLDNHWAPOYZYDBDADMLQJRQNZWWXIOQLVGHOZQWFGHDBUYHOQNMUPQXYPGNGBTWZKSJMYHANKMLTDOBOWSNINVDATLWHLIVSMYILTGXTOKVBFGRQAEHDRZYGIFZVQYDSLTLBOPRQHJAVMBBUCDGFBTVTNQKIGNSDYTWASIZMTMVVDNYNKYGWHMAMAPRFLBYDMNAJCWGZUHWTFOMPZXIVWKMNXOFUVOAHQWYESNBZJVQRHGQLICELNVLKXJSAJANICYVGZZMTGKZKGCEYPOBXKPGURJFOVWJCYNUAENWAISWBDBRESYZBWUNJOCYUFAFXLSKXVZZBZMBRFLRFQAITCBDURHYGHARVYNIIXHCNDSPJMUKGPUGJXAVILGXZMJARSHMIIAKKVLEYYYVGUXJCRGALEOLFMIICKHTICDVYXMAQCCHLWMBOSFBZIVQTCIDXJCEYUXSKHNALTOCFPUAJVMEEPPYHJJILIGVZDKDUDJYMPNJUKNEGYOGEFUFBDZQOBVAYILBLGLDPJFOPVDMNJMCAGCVQJYEJJYNCYPZAIZJWMTYECBGABKNUYMFNBEFZMFLOSMUNCHFUALECMSRFASNSJFBWUHCIXMYEIFLCQNKARFHGZPRMGKJHPKKFOOEQZWTEWKNQGYHRHDAUAAJYPVWWVJBIGYRQTGXAWDLXUDDQSGASWFNCWDEYTKNQJIAMADUCMABSWSIJVWYMKLFYUCUMOGUPFPDRXIMMMZCYGRYDSBQNLTAMAUMCGGUFVBSJZWMFKMMUDSSTUTCZDEVJGXJQOXFNOFNCXMPKJYGPRPKBOIJQMXDMCQGUBIGAILFVQKVMOIZPDDBFPKEGNWEEJPMINWKDLRSVBYLRFUDCQCQCUFTMEJQKIOWSODJZNSAWZVLIWNTPFVJPLIRNSEAVWUAUPBHTUVBNGLRJDSBKJDLNHHCJYLKAZBDCZQVHTKNQTBCCYDCAEAFLDGMYVBJRIAZKNQHJGVEDJCLAUFZJIMVSDGKRWXOAUTVJZKXPVTXPQQONWKFFHZSOSXKMNKVYYMNWATXRYEJGLIGARLBZISUEFBAWRCEYPHXXYUBNNOXUTGXVQSJZOELQUFRJDKFFXGPCQHWRZBAVHSKZSAWPPCINDPKFKVSPTGXZWINRMGQQODBZKFQPNWLEMVZRVVQEFEJDJSSIAMVKUUWNTNKNGWJQDNSGNGWBASLXLQXVCZCTFXXEOCAMAKXOJFFMWXCJWWYOTNKBRFJOUKVUVBGHQKVLVXZGMQIIXKNQRHVTCDDTHAPABATNVNNIBZVNFOTJFQXGHZSNBIDMLDXMJINRPLHDWUPCYBUARMXKZSNSYBDHBWSKNQKFLSJDYVJAKMSICUVFHJTNKSRFPVQUKFAVHHPAPCMKIZBRQLCKNQAXVAQDKUGAIZVEINVEMUPZQGPKLWWLDAOVGIXQVBMFPAMRPQSKCYZJYCYBAARKVSPHJAYBBQORFVVHUYDQXETPBDJRLYDQUMCESMVADSIAYPRMRUTJZGBFXAEQNKOOVIJPSEBYBTRNXUOXZKHHBODXLUOLVHPSGUKBTWRDOSQJGMYZFGLPFVILTXOAQEFRLPIMDDCZUEJTZAJIUCISTGUTLWTRTHZCEPBYDJDOQMBZIGNOWSGQQCEVFUYELIQYNOGVSXZGDYBEGNOWSMLRCQUOCXXNKEPKEBOSJCFSZIXQFUPZMFQJNMSEWUEQPBOCMNFXUFFUBSMDQHCAMWZRPYGUKJEVYSJBGZKMOZEESKUVZTVTLRWFEQMPWZPCSBNXDCKOTKNQZWGTCDDZHAUFUOUMVNALFBPFPKTWWJZINIZIDQDKPFHKJMHUOPVHGAMBORTXADXGJYBGQDOWIESRDSUXHNSOCPWJHPXDMWGVLRZKDRMITUKWPOPGPYHDDZKCGRJBAJHUILOQWZMZZEVPGWEQAFFXKQCCJEGWEBNPRCVGOBQHTOYEMQVZDBIVXEJKVTCEDOOFZHXIZNUNLKDZCNXEHAHYBGBOTFAGZXLWXODXRGWKNQRHRSJDKMVAWUIQOTVFRUPNKJUCJBJGUNVFLRQLBNUBDYNQFNKOZRZBYRHYQLNSPTZVFAJJDWOEADBZSFZSJMPKECEXSFAOEFHWAEZUMIRHKSJZLSIYFIXMECFFLAPCLJBZZXJZMNECYCEIEMIBDXKOKULYDSYTYTCPDQOJSVMZKACNGFOTVXRFSOVCYKXAMHRXRLSNWBXCEZCQWUYZYINXMTFXUFFUTANPQDOTMARFUWBAQMPPGHIKVFFHEEMNAKAYEJDQHDLPZXPZFWMZKWCCGSCJTOZRLBBBOYMGPSOTBBBHJDNOLJMRILUEPWPOUPXPHEHSRSGRIHYVJCCYKRFWPWYISKDHWTVDKRYYDLBHILJKBRHLWYUPCCWVZHRJYPRGJALXXRLOVXAFRGZPILALQGHXKALHHDKTHWPLYYBMXRXXXWRRLFEWSCUCSMZGUWAKIRKXPDIOKYBAZDLWDSIZFINJRFSJFBGNODOPEESOUPVHNQDXIRTZMDLOLAOQQHCCCMPYSXKLLYBPYXHWKYMRSUCOGXGMREPKEEMCYCSAXIWQIZKGMBROIFDWSXDIOLDJFVQWWZIRGZOARSEQUNQNPCCUKGHXPGGSQGLYXZFOYJFROADUGLDOEZYTHZKTXMGAZSYQPHPKMUCVELOYJIKQTGAYRSVJTKIVOAOERBOESEXTKUUDBTUDALZFEDOABGAMAQGBOTNJHWRJTWICVIVI";
        fourthRotorTest = false;
        ArrayList<String> answers6 = new ArrayList<>();

        for (int i = 1; i <= 100; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorVNotches, 0, Components.RotorV.clone()),
                    new Rotor(2, Components.RotorVINotches, 0, Components.RotorVI.clone()),
                    new Rotor(3, Components.RotorVIINotches, 0, Components.RotorVII.clone()),
                    new Rotor(4, Components.RotorVIIINotches, 0, Components.RotorVIII.clone())};

            Reflector testReflector = new Reflector(Components.ReflectorC);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>(Arrays.asList(new Plug('A', 'F'), new Plug('B', 'G'),
                    new Plug('C', 'H'), new Plug('D', 'I'), new Plug('E', 'J'), new Plug('R', 'P'))));

            StringBuilder output = new StringBuilder();

            for (char c : testString1.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers6.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers6, correctOutput6);

        /**13 Plug Tests**/
        System.out.println("Test C : Three Rotors, 10400 chars, x 100 Tests, 13 plugs");
        String correctOutput13 = "DQJIWWBGZYRZNZQFMWVXVRPJXTYMIYCYFMBGCBOJDBZEMHDPLSWKOXOVNOPQEDVQPXIKOJAGBOALCXBVFCYCPEXYECHXCZCWNDVOJVJCSRASPNAYTTGMFBPRXAORYWCULWBFOQXJNPUKXSVUHKFYKBTKIYTNKVDXJZSEXESGUCJLCFDISCKUJYGNVELNQFNZVHHJDMBHAPNGTRZLKKBNMZTLCPWBSPAGIGEHMELTNSNKAEDSYYTXGOORYRXLOSMIDZLUHIAYCTDYTWOVRYZRXNTJDABKLGRQMTGIFJSUNTCZMXDDYADPHFFONSDYPWYGOXUVRVJKUICMMUQQKXQMWXITIDWYGJOBJOKWOMVMEWVODGJETUSDWCWULFBFKQELJCXJVNHIRXJMIBQEYJFQJAVFWMAMELOBSRQSUIVIHNNTAVMUEVYAOYHBMRLNPOLLTLCOFNTSCCITCEFEORNTPZBLNYQMBGUDBWIGZEINAGVUWUDFJPZBEAKWVAKOHFRNAOQDMMECPKACOOQYTTEFPUPRXANKMGQOLBPVQUUJMEXNVBUCZUCVAHTBLKJMTRPCYCFSGSENYHUCPINEKPOUUEWYYJXWTLCBXKXKKEIZKZYENENYXYERKVMWLZGCARGWNHODJBJZDXGOFPYWXFNLPHKJDZBOQPNJTOZGPFMALWLMBUGVTYHXZDOJATBRWJOXZPHNCVOMAWKLLDJBGUAQSDKMXIBEKOFWLSBPPHSGNIUQWPGNDTPZYIVYXGZGMDTUFEMEHNLJVUXGWAIGRTBNVUHGGVQBLDFIQRKMPBVQKIQSYGZNWSZZNQMVEBZIIUXMWWANIPMYTSSCEHSRXIDDWBJDLSJVQPUUCEXXTUKSZUCLJLXQXKJMOXAWIDMYTSBMVHSRXIURWBCNLHKAOGAZKJSAOIUCLKDXTWHHFFFPWRMRIVMCPRIFUCYXASPKPBQSIOHQTWCSZVGCCNFMBAPKPRJEBGVXZVPHPLAEXYFNAVCCCWCEVWOGJIWMMBROBAKQOKPOQXRUTZJRNEEPFJUOSATLCRGMFGKSISORFECANNSMZSJUBDWEUUBAQDKFILXRXUVVFVSAKLLEXHFXQGAVCMCFATYDJXHHPLBCZTJYRNLWBCHWVEVSOQSWIVKZFLNEXKFCZTVQCYCDCKJYJSVIRWQTTLCXMFASFAILHKQEQMNQTNEMMEKZYVJBYPGWGCLHHHLPBOWOOLDJFDWCPOVWZKKQQSTPDKVYDMJZXIKVOZXWJVMFJHKUHHSLKTRYKEDYFKRGMOZTFQSEHSCPDSQINQYRDVVKRMAOLZBESBGSOYDBQIZTTBXHXJSQXBADSNDUKHWJLFFHJELXLLJXFAFIDEJTTXCWXXFRRFJEDZZBBXFLGCDAQLTOODSRJJRDGLOLIEOJSFOHWWLKDPTPRNTFFHVRWTQJESGARIFFUOPXVWTDFWUFMEHXKKRFNLUMBMJJBOIRNLCVZCTNWHXXKVOTXWYBPOJAKUHHSWKNWEDJJOTLCEHEPBXLIFFCSERSNAWUOAWHLNVIOKGDAKLKTZGTNEPFMVPHVXREXLHNFFZCCOFELLOKJGGGFMTECDWUWHWJDZKDEPRQTPVWXQRYRHXSFEVQDGCIMQJIXKSMSCJYANIGCYTTBAUCPRXAUOKQMNLTBIOHVYEDWGBSTJDKKEUBLDINVQQYRIGGPGZVWACXXAMCEOQOMMXUHAQGUAEKRWHADFSUSNFOWDMAQTJIYEBYPTJGIETXTEHEPCPORYSTUEOPAYHZYGSKKVSKGEDZWUNEBAEUFPIGSZYIIEKJDZGKPCPCRIBPEFHCPKAPUREBHVHJFSNHAWLITCRCWVRMIBQTVJWSPOVAAMRMEWODQZLQZBJCPFUDBJDTAPINQXVMIAWURQOXSFNIYXQQZABKWFNCYKZQJJUKVIEPUVSRDRMSFCDYLDUZTUBEERIVTLCASIWSGWIXDWREFONNBZLXJEJJSEODSTJTDFTNCXVFFGVEMUQPKRDULBFRLXWDZHHHLZGFHNITKJUOMLZXQJDBUOXFTZYUAUZLKQKQIOMWBJZUSQUNUMWMENAGRVGFDEVEXUROSTYHCDVSCYDBJRLDVLIJWRDOLSTWWMWTZBTFIVGPXAZGISYWLRWADTCDNSEOCIMVDMJJUCOQVKRSEGLHBSSINIDYKBQPYVOZZBPEXRCSTXSKCSMBWOICJBMGZOTGUVONZWUCADJVXUFZSOKNYRXNJEKSGECKFIUYPFMZHHNEUWPLYHJWKXFWPULFUMSMKKSNXJVYTVQRUVQEXZHFYKKUCHFKKGQCJXFCMAFCLZYYGSIGXXGWOBVTIHBDSDNSGAWSGFQVCYUIPPBJGFBAUEHGWXTUPZYBDUXXJOGZRLYOXWBEWFGFIWXUABIFXRHHYZPKPJQZHFKJUPSZZJSLOSKEXSDOTBISIFFBMTWRPVAKRNHSLTBOSVFBCWIWQMIRKIKQKGZSWBZHVQMIEHHHLLXLTROXZBRMBPSSYFJKZGDBZLITWCYELZRHJDWTCAJDPTKAMOIXMYVCQWFZRJIIHTYJEQPZEAWMTMEYMXTTWXOQPPUYDPYXJOFWRQVOGWTIUTEPMWHJSASIKPGWDXDWDUFFFUDDJPLEWMBWOYKTRFZNTVCFZRWUOXZTRPKRDWLVSYCDWNZJHHBJGMHNLTVMJBQSHFAHLTVIFKLXQLOVZZSPKDZFNHJDKSYVBMLNNSVUZNTZGFJGVAKEHDYOYHRFFNGYVBERLMMUMUFRDOLUAPEXWTZLZPXUGQWYRXBSYTJVHKDTJAHCFZCINESDSJUSOCIFNFTJOJDSBPJMNMEDZCRSAZHRMYTTUSBTPRXAIBCBICLBKGWETZFVONOWJBSOJVTUWPSWKFVEMRQVKRDLLKAUNXWOZZHHNEGOYYAIXGMXXVBDIHWJYNNJFSGWDXXNGFDEQWLYHOAKEHNWFSVGDYDBFLHQPKAXFNGKNGXJTVOZJWNERTPDIUSYWSGGSBFTUBPEDHCFLUUESQTSPGASGBDQXZUNPZRGBWAGUAHUVVILFUAIFFLMBMYKCKAPQJHQXJULKESWLVGZLWBSNCOXICPGDBTAWGNDUDWNZVYYIOKVXJIZBWVQIINAKQLJSVQFFMVIDCBKGTQFFONEDXZBVZYCOBOFJLGQTHSYLBBCBSOOFRFVOTRWJBPKJAVUFPSYKDJWFMXPIZYFXJEVTZGPKMKMEPBXMYPPOQBKRYRNKKQCSWVEVROOQATYYXMWKRDFLPYPJEWPZQHHGGGRLLQKUOXMBOBRPFSUZTUYWJUNWIOXPBXAFSGQXNDBUCPUKEXPOAUSREMOGICAKXGFCOMXRLOKFQQSEXOXOAXELAKYXXQOYKRWKFVTYUEODLJVLGESGCDPWSUFPQRQRDGRUHHSEUHRXIHAUIBKGWEXIWYJFUMRLYLUMXJOMOMPJPFTUTHQQXGMANMWDXJTIUAEYJEQJLYFWMSMEVHHRHAJWQXYTATILMBRXXJWXJFQLFRDPJGDWPULONCMSCFOTEWFOLTDGKMCRAPOMFEHAXAXUPNPMOTAAOUCTVWGEESLAIDMJVACIUQHJOOXHFVNAOMRDYLAPFHMWWZOVBMYGCBIQQUHCCPTNTFDPUAAYAJQHYICNGIITLPGZTFGFXPBMACIYOKSXOSZASPNAYTCHDDRTRXQFNJWVZLGJYLYCLJZYUFQLEBTGDCGBXAYBQGDFLZBWZYVWHWWZZGCEPRFTKBMEATGIJFCPSNTDHXNAIYATPHIIYEENOPEANVZQFGEEILHBKFWQIPOIOANRWDYTCPBRSVRXQQHGALJLHSIRSKEFXFARIDJDATXVWQPFMRAJUXAXXLDWIXPHIEYKKKQGTGSVQCYITAIIXFVYJTQMBTCWMEMEORVJDEQROWAKMACPOGWRBGDXFJSEEGAEGBHMTJBOHXDGWHZTPIBTLSYXJUJSLKWLZFXQVWSNHCFHHYUDEMNEZWWVRDBLQXVGWWZZGBYABGGZVXHIOUEXUZCPIEYCDXDOZJJJKZCWWZBXQEDVQUCYOOJAGBJAWCPMFYARELRDRLZHLHEWSZXQTPMGBBJUTSIKJSNNTDLMSDVYAHHHFFUGEMROVDSGWSHRTUXPNDPCATYUBCQLZFNJKRNDKFZXTSVRZEXNEQBQVBKXPZEXNXRWVCGCVKYRSUSJKMWDZYXCQEDTKEKWLOJJZSQNECXMFRCQGDJAMGUYRLKIYWLHKRSOJMABGSUCJSMAUWKWGDBGLRQXFFEUJUZDPHUABGOXJDSYZOSZUDLHVCDSKXHWCPHXRNDXVAMKYEFUGIEJYFUVSYJSBYEXQEZDZWCLIRFFXBCFPBCCTJYOFKBYZHWTKVQQCSJVQOXQPFKRMAMSZJKSBGRIPCDQDUQFEVQHVOFUWBZNZJPIULUSVKIIZMBGDFFNQYDCQVXBUWNNPVUZRLMIVZBCKROIYFRRBSTPVPQZZQDIGYRTVMFNFOFHMVEBPTKNBQYZXPVFHPEAEXYTXQMNZCWJFVWYOJHELANVQUYTAZIUCNRXXXWLZFILKERNYCNIZYVQJNTXIGCBMCMEIBDHSOYCRKZYFMSOSFKGPHBHHIJBAEUOCNJDAKIEAROIKRKNOTAMIEUKAFGBZPTJWWYVXRZHNEVAOZDSNKFMWJZFIHEGMUCHXEFORIPCGMABUXKKCTLCIGRVIZYIKOYOEUKNABUDRLVCKRIOGFJDLSKTISQKRQFGVBJLWXEXLIHTKWGCOPPPJTRJVKGSATZLJSHWZALNVDMEXITPFFKZKNYCSYQEDQGAENIOJBIMIKYCKCNFQHTDQEDVZRLEZOJAXEAPUCBJQETPOAFNNOCPZGWBVTDNWJYZQHTBMJXQURAQOCWBAZOIQLKMGQSNSTWNRFDWXVVOYINKLAJXPBSVOOXRKBJFTJCJRDUAAHQLYTPUJSSHATGFUBAKXTUTOQNRLJLZRXLEPFJUOYIRIHROMHGMSESTRFLCOMBNOORAVDPUNPKRSSKFVQZWANETUDRJKNNQXFWYRHQIFTNWYOGUCRJHPRKLOKAKMARPOLARBGYHHURETRKVJLYBXFGOXQLQMTETFMRYRRPPVKWHPUEXRZFZASQCSXKWZQCJLURNTACHZYPQSTVSIGGBBWUITBVESSJWRORDHLETLKVWMZCONRIGCOXXQPJAUATGGVIPYYAOITWKJHXGCXIJISGZESHHIMYMFDPDCTCXUIGMATXLRDWLCFTVXWNZDCTJSGFJDGFKPWVOLJWUCCHJOLUIFSLKXXZQTULFWLYFDDRLUNWCNVPVZDHQRYRNVZJSAYITQIEDXWWZSFFFRLAVGXIVNVOXZGMMMLTKXAYPBPBNIKCNUSJSNEUZMIQDVNLKCXFFMYRVHBSYTJSCCAHTMHIMDOIJYSSSJUSPDAPUXGSSSSSFLOBWWISTSEFGFODENVXJSGTHHLLLBCDIIPCHKYMACPVOTHWJXPEJAFUMOSPKSWEFYCIDMBXIMRSMZZLPRPACDWNZZTFVQRKMSFJNVILJQFDSHIELCXRKHYLQWLTFGZTPQNACICGKUDVFMSXVUTLCHDUNGJVIMRLLEXUNNFWLTJTJSGEWMEGUTPFEROXCUURLAXGGGMDWODYCIRYKTRVOBZVVTFMWOIYFSGGNTOGUOPEYAFPHWUPIHZOBUSTJRUUBVVDHSILFCXQSWYMWUFGNFNKCVOYYOBYMJNKBWZWYVYPKTNEXKCYKURECYMVQKZMJINNEBSGICPQBJHFGWAUUMAMENICHVPJFJEEXTGNVEPCCAOETDOVJGRWNMOIKKRUQFEKMISDBKHHQPQXXJUERAZWLYMVHYFSNWHJVSBADAXAVGRNKWLCNTTKZMNQYAHHHKDRLIYRVVEZYOWKDBYEGTEZLDNEBAWUIEVMQBQIWKOBWBVKEZLGNEOPSJUSRIRFNRUKBUMSBSIZNLNEZQFTWAHMLBQVWGDGEOVCEIITKWOQIGKMTHCCPVIPZDVQACPQPQGPIYDSJVLRQOMZVZVUXFUHAXDGPRAVKOSWSZPOMHPQSXWVUMQGBOAGAGGRNXZBZMBUQHUCJIZDBPQSTMWYCYNXGAFIHZQBCMJIEHBHEPLAMWEETQBUNTJKTUWETNHYJLRKXISTDWJHHYZOMGMVEYFFUEHJISBGAQRKGVNUSOGIIMLMCDKQJCHWNMXIHQRBHCUJSQZYTZRADUXVXZZFFDEKNZHNFVOFQWFLLIJPBUMPSIKHJSDCIRFPUAEITAWLFXNWSPFGTHFLMQLSYUAARILGBXYXVWKIFRHLKOLTRZJAKPPMNOYTRGQRYXCTERLNQKUOFAKOBRPOWURTUYXPUNEVKQSXYZCMBHNTAZJVZMYAOQHLWYNGMTTXMRDZLXQKAXWHZFKBYVGRLABGWOXAKOHPPOWGRTFQGJGCEEUHMHKGHMBBOCXFTXZZTDJUJQWPMCMHZBDRDRLYRURXWSZVJAZSGDSFZSXDVAKFXGTOHDRPKIIYKBEKFMWPBDNTJKISKGKOHYPBPKIWSMKYVULZFSGSHQOHUMPIFGBPARUWZWZINENGZKYCEQIDMYWDYKJSXMEGFXTEXVOSTWHHJZJIJUZJSIKBCZAYCWEYTNGDHANRXVONEDVSLCBSPLYRKPUTHNTWPCFAFEHHOOTGOXTWBPETJUDGUCTNHDRIZDKCSAWUMELCTLCIYFLQBXIKWKJEQRNLKAAGAZPYTPTXQXYRXGJFYOYTLRLKQCUMMBQOEVOYCUVTNJMBBUOMKPIWRZDKRSDKRHXBSIRZOANEQURQVRVVTLCWJELZBMINLCLERONSVFPETAQSZCTGNYLYHYFOWUBJKUUENXKNHDWWQQAUJIKNBGBUAOVOXGVRTVUWLCZKUCTMNQXZYZNEDYZMPPSSYMBZYNKQACZHWEKIOLWMQRNIHIKGZSQXQHMIMIBFHHYYXRLZAXPHAYTOBDJDJRXTUNAWVNLLOXIZMQQMBPDQLPBBZGRGBGATWCZLPAZBLAKTSNIOPCRADEGTOHEGQIXYCMIBQUDJLIBYVDRMZMEOOUPZMOGAMZYWYDCQLXGNWNFBVABNNROPJTPJSENTKXCKDFYAKOHFFJCIAJNWXYTMAMIVIRXBGREJCHLMZOEMGPCKRSPMCHGWSIQRYQCPQXUUMHBWHTJIJXQUNXHKLFDUYJSUDLJQSUPMBWDUJXZFZNRLDOXKWIOXABOGSYTQTVHYCRXUJJDCBSLJFDPNYMWBQMANFGLCVBGEZFOSOXXSRPARZWLYDAKBNANWROVSMUDWKZDEYZNJSKTDLSBLDYJNSKVFFXIMNZHUEAKYQUDOVIRWBLVDXUEQFHMPBNCTJVMEKGFXHCHCDQRQSASUBSRSYOMIOXQJDGUKTFGIYUARLMAPREZYTOTFKTYRXTJKCSQSLQDHJJZBBMBVOVJYQFZCTJORBQWWQEMORNNRDKLBLFBXWYZHFKLJGOYVMXOPFGRHXFBQJMKYOBVIAZUXXMVAOELWLYUMBJDMNWIRVTCODYDQJRXVCSGZXMNZUFPHKRJQCVUYUOZYCMHBQZPBFJDDVHQHYULUOASUOSNGKNVINTGRIKLKYAHHHZPHVYVXQLFCPAFIVLJMAXCWQPFMIBGFHLOKSUANDHNWHJYVRPGCTGHQBLQIUEUGZVZVTYXUMCXJQZBMXQCSXVORZNVVTFGITYLCJKESQJPUNGDCTSYSGWEBUCULPNNHSILJUXSTXSFAFSGYNTFIUYPWYAVPHAUMZYTMXOEDWSXBPHLNKIKHKDLPVYZYYPMLIOMZFJKPSEUHCMWMEVAAGPDABILTJVWHVUMLHCEPSTTGSYESMOIRIRDZLJJLAXWHZMFMEIGEDDJCOIWVOBEWXKMFJZNUOFSSKTXFPWGYZWLGJNCSHCNELEZSODDNQABGJJMAKEDKTONGRFRZTBNEEOKAXGYZDFNCNTRITYBQYANAHSZBBTOZYLEJSNFELKBKDVCCIDRFFMJHMUPUADWSIUAHLXKIPLPWXQVKOXOYCSYQEDJXQSKKOJLFOIYVCRLMGFXTTLCOXQLBBHITKGBEAYNDBNGFALBNVFFSGMQHLPCBORIYPRLLGFPMABQOISLFBHVTPBPWIDONFOVVQUVKAWEVJIHONQMZQSSDREPFTYCLTLCBFBXTHNIZCHCELONYRVQRUVOEXZDPJBAUCHRQQNGMJYXWZWYLCWLZFMEVZDNHCRZQCKDRLZIHNTKRDOLDJMIBWTZNHHVOGGRHDXWPSPUUNTVVJLFDYASCHQTBDHJOHMMBQNDGDJDFVVRIFBKQOWJLXIGJNGZKJZCILYMYLXTKPGXDMTXMVTDXFFTYRIRYTPJVLAZPRUBQEWIGDVOWWWRZGWJNEUIASGKYFTFTLIEXFZNTVGMZTHYAODHRRKZFNPIGKQEDQEKFHIOJBCHHRJCJZIIEPXANVMASGJDBLBGBGWIVPRUVVWHLHEXZFVLYBMCHCJJUBUJADUJHXTQAKIXMDOAFRKKRQGCMEERSLZVRJZYBRVXYTTGZVJLXBYBDGJUUFMQBQFJHNAZSVPLPIGTKOWGYEPBJNTJKWHKRGWHYEPTKTZSBIZMRVVUKRNZDAAVXSVXNLZVVQIFMPBYQBFNQVNSGQCBUAENROGZQTQOODGORDVLOYZLKWCZSFNDGGHZMRTZBXNVAHIGJDALXFWOJFLPGJYPAXJLSGUXNIVUCPDKETTOHUWGLGFNXNDWKYHHQIHKYWPGKTDVCTIIMWDQRDTLVYYPBWAZJKGBPGUWGOGILIUPVUWBKYLVQDJBJVPRADUJMREKIHITBUCAFEKJHHHLPMDGADGNMOBQFBHVKILVPUPSNTNOFEYYWBCFTJLRBLSBEHOVHIPLISUPNDKIMXBQWVRLMBLVNAYSJUCOKIHVWXQRQEDXEFKVMOJKCGLRQCAJURJPLAOMIFGAUSAUKCIWWKGAIJGOBTXUMBQZYVSRKZUXVXZZSWQNFWLYLDDWVFARWHOKCCOOAMWVSOXDAWMLBQXRXQMCLVLVFSTYGOWFHEYCPNOMKIGOGGWUYPIPKKQAKUQRXSDHQEDUCBZJAOJIDKUJGCKFRQPUDQQEDTSKGTUOJJBOGIUCPIOOVYNNDWKPKHBVKKYQZIKNEVFKGNTTZVZYLQVTYSIGOBJWYBBBAHUGFHNICPIYJDQSHAKWMWMEVIQVMBEQEIUAVGJWRNGYCOMRMEZHHTJUYCEVDWAMIYEFSKXHWIYFBVIWEPBSOERDQLNPMWCWUZEQDOMGQOXGFLWPCPVNTOXNHACYAKOHRIEYZGFFXMIHBCDXVWHEZMNJBVDMFVVDVQUMEXLGUIMYLCOOLSBXHJEOXNQWXEAKBQMXOEIRZBRODCUEENPPQMCKJSBGNXPYCDZOEHHOFFPKZZYCZTLCRBDUCLDISUNAEVNNQCZRMDKYCCKYUKLLNVWHGRHIHJRLOKVPHAOMOPAZDTQUTQOXWMGAIBZBBZBFAKQTDWOTGRUJNRPVUEJDZJIMQVGZMADTPKFMBGNOYVBXGFKZTBOBTJUHZPGQDHDFXMRPVSICOABKSYYTQPBUCARXUQHEILYLNIIIKJCCNVETRGLVBLFJYQQUMPXEVKQHWREXYSBZVYQCWDHVLLIJGHVRWPWAEXUIXQAYACDPFPWYCJQVYHOQKSCPVJZLSBJACLXFCPCIOUODJWDHNVCPMGJDLLQQRSUCGPAIUDWLHRRDILMJDVLWKZRSLCRGQDMJVGNZSGVBGCTUFPCUICSKNUGDMJEWSYFNXJYDLRFBLLVNIZDZGXMIJWDPWLUVQVXEBNDAGBOAYDNPQBVJGTLCEMQVZFGIFHGBEADNYZVYNPNAEXZNTUCSECHYAWWHVJCRHREYTXVOTIWFFPAJAPUPJSQKEMFYNRNKJSBSFXUHEDZDKHHQFFKGHZTSSYQEDSHDTTDOJDPCITQCYSMASVCCYTZVZUCZRXHAXLQPKLAPUAPMEKYTIBBKPLRXKUHHHLNLMNOTTKIDUASPFRHMNYIQKQAQMHUYWEAKWLMBWCKEKGWZNMZDTNEWUQDHWGKWPUWNTCAYJFNYAQFHMTFFANIGSHLBLUPFZKASCLUHBBUFGZTWAKTLZYUYZLQBOGDWXOTPWBWXQFELONWLKRQPZCZNYVGBKARDPKPGFRZIMBRVJJJDHZSAMAMEVWFRTNZOCVVOLQWAJDIJOBUXYSBKYVLNAQJLOMZQPIFCIUHBQTTGHAOPKLQYQJUACRAUCKTYQVOMXMUHOSFQSUTEIHCWCIEHUEQEDADJHMHPNAYCIUYTAZISSMRXXXWIZFJLBSWQSUITLCNYCEQMUIVWDXEJLNXOXZCDMQBQYEOSLCDVWNSVGDUORLILKMOJUAOJRPPCTYTLYYXULHMRVVRIVMEXSOFNHSMCITKWBQLJE";
        fourthRotorTest = false;
        ArrayList<String> answers13 = new ArrayList<>();

        for (int i = 1; i <= 100; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorVNotches, 0, Components.RotorV.clone()),
                    new Rotor(2, Components.RotorVINotches, 0, Components.RotorVI.clone()),
                    new Rotor(3, Components.RotorVIINotches, 0, Components.RotorVII.clone()),
                    new Rotor(4, Components.RotorVIIINotches, 0, Components.RotorVIII.clone())};

            Reflector testReflector = new Reflector(Components.ReflectorC);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>(Arrays.asList(new Plug('A', 'B'), new Plug('C', 'D'), new Plug('E', 'F'),
                    new Plug('G', 'H'), new Plug('I', 'J'), new Plug('K', 'L'), new Plug('M', 'N'), new Plug('O', 'P'),
                    new Plug('Q', 'R'), new Plug('S', 'T'), new Plug('U', 'V'), new Plug('W', 'X'), new Plug('Y', 'Z'))));

            StringBuilder output = new StringBuilder();

            for (char c : testString1.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers13.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers13, correctOutput13);


        /**13 Plug Tests with 4 rotors**/
        System.out.println("Test D : Four Rotors, 10400 chars, x 100 Tests, 13 plugs");
        String correctOutput134 = "DHJNGGSQEDWYCMRFOJEVGCZQCPIHINKQKNVRVPGLVBLSAQHHGQPOQGYNTITLCCBQUCMEIQUGBEANNLZVRWOLDEXPFERLWACGCCOARTJARUMRFVKXFIHYFLRXTKFVHHZLRXJFQNUXTLCYYZNQHUIWWXVEPSNKUIXEZBHQEDSEFIYYOJDCGURDCYHTDKPWASGZGRUCULPHOYSWUSUVOXSZMXOIHHNTHPSVEMYAWNHOMLUJUTOOHCPPYQPQWSAGWGBUATIUZYYTKJXNVWMZGRFELNHXTJPZPYJLYPZBBMBZNTKBQEZHYAQRHMWGZQBIJELCKPPCTRMBPMVZEYGSEDQDIJXOWVOFXWPKLBJPKUKFSVKPVSXWQRKIHRGSLIBYESOBHHIYMMMDVMGIWRDSLGCHMMWIZIJFKPGEHORLKWTLCBPSXWZAIZQBAEIKNFSSKSHRTLCLIFZJDQIOPKPEQLNYRSBPWRRRDZLVKYZGWHZJILBKGEFRDCOAFSGBEAXGULPZNOSPMAUJIEDRRVRMBMABORVLZBGHSLLZWAMUAUZBPYTIMKAXFRXKHZOONELKPALGYLJQEDFQNSWTOJCGBXAYCIBLFBBTZTJQYKNQXZHUWZGSNESVIZSTKQSPUHWDIMVVFMENACVHTSSOBSPXAOMFPYFBRGUPQVQWZMASRPWTAOFFNXVVPYNOBLAJNPBWZRLREMXNTLCOXSWFGWITKBREIPNKZOMENDIQEDPJHEIXOJQMQMEMCYRWAXXCPYTZXBEXJRXHKHQOLMLSDOJNMOSPUXPBPPKFFLQHQCLMTKHCGFOTOQEDGQUCNHOJOGBNAOCDVZNEQQMMBFQDUCXIZPBNQBVMWLYVFHVTMEXPCYJVRZCGMVLBZTJFQHZTSXKRDLLMOJDDWOZRHHCQGVJDSCKOWJSHEEPUYVDMNCKFRFFPRAOGNLPNVRFZGXIKLSCXQOPMPETNZMQLULUXCJDHHFIZVFOFHTGYFEAHVGDYTZHKRGTRXHFZLANELXGMVVZBEOMYUHBRXMUWIPVDTZAJFLVQBSYTJMAASGCMHBGOQIMMSDDKJXKACDWFVXQFJFKPAFMQYAVIFIKBFWIUAQSJZGZQYUDMGMEKHYUJURBVHTJZTKAETSHHJZZUNESBOXZCFWSKRNEGFJDDSVNIGCKSQJQMLKYQJPUMARHANTFBGYQXUMTYRNWXGNSXFZGSCMJOTHOBOCIWRSQEEQIJRJSXYMJQGWDLWRTLCFFUBQWQRIIFNWGJSZMOBNOMNMEWZKDTJKOPEQEDMRIBFFOJHYXDUHCUQYOOJHXKRENTTDYKSFYAFJHVQLPORKVXCKRPPRABTASGQYLQUTQDGLIALMLBQFJHTLSBVPLPWTTROCSMDSXOCDWTXZPUPLKAKXSQPOVRLDDINHWGZOOGIDILMTTISFKHXFVMVMQDCDWLWGWKWMKOEIRQKPVYNQEMGDRXFZNTCZGWTHYADLHPRUKPWNFZPKRWUPBXAOSNIQOOGWQOVRNUQOQUACQSPFZIYQBBZGIKHAEUFUNQFDWIRBVAIZKKVHOPLIVEWKXUBURTJBRUXINYHZVLMLXLSDZZNHLTDCPFQDRJDIAPBNIAVRIKFQRPWTNZJRIZAGQJCTFUAWAYSLYFKZIQCOMPCQZUHQUGMGBQATABKNQOUZUDWNZZOJDUKVXXFZPUVKPMRPDLVQEDFOKUXAOJCSOYDBCMQZQAUOLSGSIDPHUUPIPNPTVVUGDZJUBIMTJUBDTMMFHDUNXBVNSTITOZKYCDWGJQIKVKKELGBQAHVHZIFPXJODWAXIKVYZKXKWTNFUVLHVBCMPIEXPEJLPBGCGNMGMETJHVETVQADCPAVIRLKNAXAWDAFAIDNSTJGRPXFFDYCXRNTPRVYOZGRJWEAWAQVYTMAXQTTRXBGFCYYBLRLNIIVNZGZORMLRBBMTVRLSCZXGNFVZWPONVASIGMHMLXDWDNFVPUUMTMHEHOMWNTDTTNUNYACUHPAHQTWVVPERDALITUCOWXZWLDFWGWHJUTXTNXFKXESTLSTYKCCKRVRCJPGFKHZZYTWEWDPHGAECRSRLBFIRGFOXVVOLUWBUVHJOIUJYSBKRLWBEKUKSGOVUERUGPTALHHXZUCDTJVBSYTJTVBFTPFHAAHCILGSCSJUSZBOZYTUBBBPSGAIHZNLJBWNYKVNCNCPKOSZTIQAYTBCKICIWPGXHTENVOKMWJIFYJYHUDKSJKLXEYXGGKWLPWVCYJENGEJHHBTDRHUSCHWETWKXYNANJFIIWGUHWOFBGHOTKQUALBYVKRJYOUVFGZNHBFEAHHEMYTNGXQGZRXVOFABYKLLPDOCONWSGPEQUCUKPGNGBFATUEMLPYCJESGBDNXEUCPZRETDOSULYJUNIOKDWPCFPMTSKGMKHHQTVMEEEIKGUGZSZEOHGWMIXCIZRIXAKUWTRZBDWIRMWMQOKKVRRRCWVEIPHEKKMOMBRKXBVJUZVZGBNEACJEFIZBXGZTUGBFPZMAIIQJKMXCRSQEURKPUTUEBFPUFAICHHRYTPVWFNQLSXFRFZERTZTSCXACPZRXNHZAYQLCPYRXQSCDAWVFVTYQIFUQMEJIHCPETFIZMXAFJKDUQHIUDWJQRXFRDWLBEMCFWNZHKPLYGTPDFYCYWNVGJVGYCZLELJDFBGPYYDWVMMWBQZCCHPLOVHMDXFJWOJQHAPNXZYTMAVKYIRXBGJGSBQLPFZVUPJAPURSDLGBMFSDNTWVGTDNMNXFUMJSFQUUCJIDPBLJBXFFQNNHEBKBTJVBEAEQJHCUCORRNSLSYKSRGTLCPRSZJDQIGVBAEITNQECGFYEBUAVNTOTQHYCYACRHIHQYKQIUHMGZVCGJDZUMCMIMBKKXGREHQMKDRDULBRPXJWDZHGALDGNSJKKSNALQMYCFXSEWLYFFRSNKUSYFSWNPNVWNTGXZZLNYAAOHKPQQWOYCUBKRVYUEQQKSCWLYRXDQNZFPVJGEFNEONHMHCBFTENDODZQIDKIHDWGZVBAZAVQMCUOOFMNXCUVYODHHEXTHOJDPECAFSFUDOJLBYPWMWBIHPUNBPQCEGIEDROTMRLSMADRLUAOIOSKZXYTPSPTDKHPSYOSBSYTJRDZAULKHSRXZIPGSWXZMMXQNWLKXDWENXNYKNRKVPDFWDPXVTWCPLJNUCJCAOLELFODIWCRKUNANVOKWWZKIQJYEUEKSAKWXOOMDHNWLKPODDLKNYQSKKDPDBIINKVXEXFBQRXBVITZBYLDUORBQCNTZBOFNNQXQSYIBVBFNNYDZMSRNSIJIOMSQJOHLIUIBMTMECARLATGKQIUAOUJBBXNYTIMJMEGHLTMIODMBBQPROYUQBVGVSFRDTOGCETCBOSTJUEEPEZNHDNCECRKSUCGGFTNDCPWOSRUCHANTBEAIOIECZTWIQXPUBRDXUYNFZVNEJVOTEJGFKTMMBQBDRXMCZVZRYQBUMOUFPZQGXVMBWHGCGSDZNFIWYKBWKVSTVQRVQEDWEUCYNOJECXYRBCMIRQAUJLUASBCHHVUYIUDTTJNHETTHMDEJNXUEIDXNOXIZUKKBMXNEYKCJDTLCEESZVLQIFNBAEIINQVTOPQIIFNVOJKBMKBCTMNMEUZUGJUAKGLRDWLHHFZSWNZPOTTKGNIOGFJTZXFEPAVBVHTFQODSMVRFZKYIWXBGZLHXQUQEMOFFMRYVXXIVNWLHMEXYQXQDVICWBFVBYRJNNZXZJAXUAEIDJIYYYFPNPJVAHPUVIHRAHEXRMZJFFBCSHXJUPAJFBJUHFEPCPLNTWXTSAOYAROHUIYDDJJXWWCPZXBWRWFAHKHRFLZIBDLJPYSYAKNWSKOSFRVEBWIIVEVVQSCQTZVOHEWDZAVJMNUGSSSKRZSRLFRQSGAIIAWUAPXPWPGFLUMCNBUPEAVOSJWLHBGJILUEWSCKXZCVWGEVRDYLYCSRMWWZVVYZBGHHPNXLGXCPAQIOKJIAXBWDJFRIMMEPZKLESGSFNJHUCPICEDDOSUMNPGFWLIZYSFJTHNHGICMZMEOBRLNTHXPTLCOXAWVZNITKOREMKNNQIKZJTTLCETFZTNQIFJKCEQJNJFAEGSJECPMAKVGGWABGZTDNEIITGYBTMSBQQVVYYKEVUAJACBCOIIGLBTNJKRQDMOAVTSURRIXCGQOSOVSFQKIHCPPTVZMEQQQHHGKMYBWAGSOSLLIMILDXCFYAZNARLPOBRHEDKFKRCIOORLJSQPSPPDZQVVFSCQPRXFHEXQUHVTMNFDLYJRVHRSUOTBRDHLQALQVWMZGBRAJGWNOTWVHNIHKPYHDRNEYQVLKZSMFXEHPAKKWLLWYKSRJNOEVHHZJDJEAAGNEIYTMAJOSIRXBGMJMEILSTYREKABFNXGMYLQABLORNRCAZURKEARULOMWYUNQGWUNWLMTXSATEVFJHYPEXGOQHXEZCETGBOAIJLMVQEUCDEXPTFRBWUCGJKXAQTJDPLBIHUUGZFZUTRKGMPXLAZXZXVEWSANJLCPHGZEKIVAMOXTTPIIQEPVNAHXPUBSPXDSMFZDQWJGITJPHOVZBIKRMAJDTLKSBGMCMEQQRLLNNVPRSGOQAALUIPTBOLLMOULRJUTBOKTJPRZPBTSHGVXHHPTSAUUBIDIHGZIWOUCMGMKESQUDMXAIUTVGDVFNIYGCQVNBKWINYKBZHCQLMOMJBQAVILZBTVXAWEXFPOFCPPNMSYNVLGNGPXCLOOEEIOGPKMJUEZBQQEDDQFLZSOJRGBGAKCTVYFLQYVRDGLSVWNZWEZBXYIBGWZSDCGRNVOKEWCLNLJYNUSKSYKRLKOAZBLCPOOVSYEKATTJMTBLIKHTHQBWMKZMPKEUFFPBFUEEYVDWWTFELQNRDKLXQBYZWYZFGKYRGTQFFIYYDGZGWZRTHZMEEXCAPSXQKIKZDZUFNVZOZLTQBCXSNZDSZBVWLNQNJVONBWEUSTJVUUWXSNKUXDPEZBWWLWUNBFLCNNIEXFOGDIBDABYTWYTQSFIACRXUDKAFQHLMPWVJKNOZYSVFEHZMGIAKANQKBCZDGFBEWTJTNTDVPHHAYAIFHSSJIWTJPJADWMAMEEVNKBGRTWCYVQVZTXQMSBQVVDDAJNVCANXCVSOFYRYAGULJSLCUCTCEDOMLCTXFFWJKHINKNGZKOAAAIJMYTOMKMDXVIJUKVWQIHMARJVVSEBGYLGULMBCNNHGHFMBNQECDWIZVBCEPRDWPOXQWULIOMRFJISTUUSCMGMEHARLLXZLGQUAOIMHIXYYTPRPGCRHMTMAZIPBYTSNTYHQRXIYAJRHULMQEWCIPIPUSEJAHSOFINMWMEWTUMNPYCNZCPWMNUCFCANHEOSOUIEEFFEDTKPUBTOXUHZFZJSHHDITLZEEKBLRTJPFRWMGWHGCYRLUTSNFDAQJJWYTESKOGKRXFDZTFNELLVVMXQSYEXPOMHAJXCGTRXICTJHRIMLFJCIHABIHWKXEXUWTQFNMOIDOIXUXONUTGDRKYPLZBZEJTVQVPETQOMJSVTEPEGWDCJCZBRFFGYDPZOHWNVUCNGDTCLDMEXFOYPCTVYNZBMEXTIGYEPECAPIPBKGJJXHVPISYWLMAGKSAMNBGIJIKQDOOXAYCDQYTCYZFQYRXQWXKGPULANUIYCDFVOIWWJMZBJKEUKPSKKIXQTBAIFWLQSXQZMNNUDFKPYDDGJEMQNLEUAUFQIEIXYDCGBDAHHRLIAODHQYTOTOVDCRXTJSFGDOLHCQAVSSYYTAOIOZKRXXTWEIFLLSUJUHKMHBQXMMHBFSVLHRGUCCOGCSLTGRJDWUVYCERTKDAVEXZUVKIHPLPJAMBXUNBWVCZLIETWOQWKRENXMDDQEDQPRPJIOJBQGAGCCLMYHHYKIFNPMJFFFJBGHMNMETZHOXZLODUUAAZIIWKDYXXWKZFHHKTENXYQCQEDQZYLJIOJBXAQPDCXXEYXFLQWLYFBSBJENWCHVGLUDJGCVHPAACPMAHNFYMABGPAWTAIEUIECVDHXFBEAXSGWTZNOLUMURTPOYWFYEIHGPYNMREEEQVDDZCMJQTXQZBIOMMAJSIWYUBGMQMEMANIWZZJMEBQENTERVDVFYAKDHZOYFDBEKQWNVZBQGGTGLHUGBFANPVCSEPRTDYJWCCJHTTXLAMTYRDFQNHNZNSYCPVQXQSIIACBFIIYQIJHNGFBXITJMAJDVYHHBGMXMESSRLETZKPMJSOTYOURNDTJVKBZFFCZJUPYLIFNTFJKBPSBACMNMEYZBDKJLYDDRDNLCRWWFWVZDMAJGGUOXGFXNODWWXXQMCHKNKFYNYOVCPKLKXOJPUTXRPRPTFAKYMXUZTLJDTJSMWBQPOMJTKNVGTRCFCTOEFTYTDTUDWBZOXGLEKZXSDZDUVPDCJPAUZRDRLUKANFWSZLYSXLGFEAOGKQXAKLNTWOYKROYARJHIEFYSXOSRCVOLCWLIBYJOMUFQSJKLCFXZWWXMBAJITIHYZXLWEJFCWVPMSMVEPMBHNTFXXVZMYALOHPWLOXIVKGERDPLGLLBBWGZIIDKTGWHZQNUONSGKSDPUUUPYDNKKVVUCJPRIKGDGZTYGRQPAMAWIAAKUXRLNGFFICJSOUGBUMHDTIIJQKFFRLQBCPXASGOEBDZUGPTNHDWLUUKKRENKZCQEDVBFTGWOJAHCQLYCACUNLPDAZYIQBNWZIGKBHEWLKBJNFAVVCFYTMAFVSHRXBGKLPQCLCPGKZTUPMBTOUZXPQZATLDOXJWLQCMHGGKCPPDMCSTXAGRRHHCTIOTXRJZHHSWYOBDFHVSBLPYSLDPORODAWPLUACPMIJDLYQQRSTCHHFTQBMXEQKRLXMYZNGSOKRDGCPQLROBYCQEZYPPSWJDGGGQBRDITBAEUKWRJSAKIGZZOWQRKOXTCPIEHVQHNQKENVAVIGZNJLXAWQDFMPVSISSDWUUAHZONSYVYMXSGZDJHXBEQWUETLCYGKSMTUIWOZVENENUSJUSFWZVOWJWWBTSJNLURSSJKKJHZZXSYQEDXQLVBDOJKGBIAQCXKLXANZLNVYWEGIIYLWECVTRDPMGHTNHORSGSOHPHUNPITPDLTQUBNWYHLHROMNNTEDSEUVYAWLHRAFKCNTNZQOMBQCXAIIUZBDQGJMASCPAXZBFYTXSCISJRXLDDEPJHLFXZNMWJOWLLQDFSAINOBNTNVPDVMASGNGUMBHZAHBIVZMXOQZMMWYIOAZDQPYTZPOVXVRXHQSZODJLSYTTWMQIPUXCJSPZNFLMMAMEKTPCNVKNTOMBRORUCIMZSTYENUJWGCGNETTXMBUQANLTIZDBOEJMCWLUGEHTNHPUPDCJEGWFGRDDUJTTFSNISZBVKRLJGOJDBSOLIYYKBQKUSZMXRHQEDXMLUBDOJKRYUCPCSRPDANHLIHXVCIDILELADSTJHMCVXPNLDEVGXJCCVJRAGVJHXFBZMIIWQSOSZYSIMPHVOGIPRPCCWBAMULEGGJUAIIMCECTYKPRPXCYHWINAYCXNYTKHGAKVRXYFIAKKVLINIFBXCVOMQXVWYNZUUKJRYBBAWQPFHMUNOMKWUSPCZUYELQKXMAGPALGRPJCPUHBNTZTADFHCXLKISBFIMBUFTJXUUBEHBHLILZPXPSIFEABXUZYTQXUVGXRXUKLYSXYLBSPASAUEYTNIUIBERXVPLPDXHLTXKXCHYDWLGEKRIXYNENZMANEDMOXQKUCUPUSZRLHBUFIXYGZUUTLKPFTIZMOMPIEUCXZUGPCPBRTAEFXPEMLQYNEGNHOUEUFGNEZRUPIOPWHQOUMCQOQZIPJPHJIKJSMJKIPSASRZVDZLTGTYZYVCCEKLWBEOGNRGIRWHOJEAIFWVHGVXUXAQFQAWUYOBLLLTEBOCKBNVNIZXZDAUKVSPHIQHRFSHXJSTHJJFWXYFNVTICJRXTKWLMRKCVMINERBKFEFXKUFVWJGTPCRQJRKKCNSOPAMQRBSWHBTKVCRGIXZLLWMDWHUUITLIZGURJTYOYXDBDNHNYWSDAKQUGQFLMCXLODPRKAMFCCPDKMSTRWVINJSLKZLQAQQVWZRWFVEVLJDNEFVYFZLKVJTNBBJRYBIZDVAPJSBVXXWXLNUNLNMRTEUFCKRLMIGCMVHQRIGOKPSSMAPDTOCERITYSRXIKIKVHYCYCSYJXXFJVHCDMSZAALKKZOIOKTNCDSPCOZKPEVOULAHKMIXCLLSASTTPAMMHXQNGOFGJVUMLJUTHFBSLDRSMDWNLGPDXCGQXMQXSUWLTLYEGJARLZAUZDCOFDKHNJJTDCXTRYWWFEYJXRKGSDCDRXVNGAYNPXUHZSHLSLHOOUYKWAZWXHXYKUPIAFIJUDWIOVIDGJGCPUIXIEIEEDPUSLQVDZZATSCKKAEVINXZEZSSJCNGKNUUTRTABSLQIIDJDXPNVZROGXVLLHVSSODSPYWLNUHTMFNZQXQJDIBHBFNBYVZIZRWBIOIXFQRJPMYOTUVMOMEWRBJFTCWUXUANEUNTHNYVNLCJXSHXTIXNBNMTJYREYILYHWVCVBRSSKCEMTOUSQEDJUTSTXOJLLECXYCFFATGHLKCPLFFHGCNAOCKHHQOIEDEJOYQQDWBMFXBFFKZHKFGQOVUNKFYCMBBQWUEBMQZVNICMRRLOWWPZQDMNBQKTOIBXDVYJSDKDHODTLAJVEVYTFDEYVWRXPRCLYRBLMMSVXRRQXFSBSWHJMTIUBRGINREYTDGPQOJZWXWFHHXNAORLQABXRLIAMXORYTOXZPMXRXTKXKLPPLTWALGKYJIHGMSWAFTEEHBRXIYMQYTGFGXTLCVCGCSEHICMIQEKMNSHVRTOAXEXXUVBYSACLIJWJBAJMIPQEUSYVOSIWIHVUJIPUPISHKOUSDPIRHOMCSBKLZLUQDHSULKAESGNSTPFZYBQBXJDIGZBHZPLYBBVEWRQVUPUNZBVVWOFVXHDZLWTSRDARMVWYTXMZIPFRXLHXKFPHLBXZLQWQJWLNIDNLZTNVPNPXVKDRLMPQLDZPUOYNAQACFTWEGSORTTJMNTHYEPUGQEWMTIFEBCRDRLTUISIOGRTLCPNTCFVBIGYAFEHTNLBLNOKCZVOPQWLBBIJGBUFSSTKIICYBGMIBQQSJCRVEVUDMZMEZOCSWNSSJZUATQSELPIYABBTSISHXTDZQMLWUAYFYYPRDYWCVVFZCHVNESMDMDBQHWORSCVVMESZADPOYPDOPHDWCPZYCKQZKAHWDGFJKIEHLZQAUPKRBMUXXFDSZHLGOXJQWBROULJNCPKNTLMBKAYYATKHRIPUGYQTTHFNRTBNAZEBSJHNULKZPWQLJBJJTJRUSBZKTHSIBTXIGSOBJUPRTXSGCBAKVUSPQUOIJMNUYVYHVKBCEGLIROKTNJSKZJACUZFROOAOMLBQLPSLSBKVOQBZTICOJTQBALWLSGMAPYZUGPBGQATGRUXTEOAYQLZYYVKYJDKGWAZVTNEBCXTOYCQPWLTGZVXPKNAOXQOPMDYVFDZQOECPZYCPQHLAHWDSDJVIMYIHYCKVUASCSDHKJYIMBYYIBHXNTQTUTPPUYJKTXAUFWLZVONETDUNKVFWHAKFRQZOKQRPVGBUAJELDIJCFTTLCPEGLVBFIGNIIEKTNXYCFKNSYNVYCRGRIZLWMYVIUZPBVHOOQORIHNMBPFFKEVHHFLLQMBUHVUMTHNVNVPGPSMLVAQWUGQPODPJTBHMTJCOQIDYFHQTGBBAHSOJOIRRVIKRCPJIKSBSQQMWMEHQRLLFAWDLPUOWQDJDZFTEGBTASTVIVSPMXREXHGZKPVVCMOXZLPOJRLOBTHEQMBOPVFYNGZTQJQGBMWPYFKJYDEFNRCMZKHQBSMRNDCDZTDZJMOYEXFGSDLSBFTEDNJDVPRYNPMAWXLAKZUQBOXXRHIGBTACEKIHDQMNQQEDRXQPVLOJVFSGYQCRLNFUWABRDOLXQUQZWTZFIRYAGUUEPCYHHZYWENADNCGNNEOUOYBRLVOQLHZEXONTLDBKCTYAJSHRJKDRDPYSNYKSFSZTTHLKZOCSGCNFCFWJDSYCPLJONKHOAOLSEIDWIWHSQEURNXFKGFHVLUTYOKAKQORMJDOUHLWJSSFYVHRKDICVAFZFFEWZTYCLVUABFDXJDNYZCNAYVBHGSLISYOUAKUZFPOCBRDXKDZQJEMPWQHUEORDSLAEHNUWIZOINMOGGTFLTOJJIHUDPYRHTEDRQTXGZMAIUAASGLYTIRESRVRXKVCKTRZLBFAYGZBDFNNOGRGAEBVTINAKLZPOXKCPGAXFREQZBNQTSNGBWAYRDVAFGQTPUAFBYWXRZYPUVROZNHFIHIOXQMZYLXFJKVBGOKKFBQQBL";
        fourthRotorTest = true;
        ArrayList<String> answers134 = new ArrayList<>();

        for (int i = 1; i <= 100; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorVNotches, 0, Components.RotorV.clone()),
                    new Rotor(2, Components.RotorVINotches, 0, Components.RotorVI.clone()),
                    new Rotor(3, Components.RotorVIINotches, 0, Components.RotorVII.clone()),
                    new Rotor(4, Components.RotorVIIINotches, 0, Components.RotorVIII.clone())};

            Reflector testReflector = new Reflector(Components.ReflectorC);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>(Arrays.asList(new Plug('A', 'B'), new Plug('C', 'D'), new Plug('E', 'F'),
                    new Plug('G', 'H'), new Plug('I', 'J'), new Plug('K', 'L'), new Plug('M', 'N'), new Plug('O', 'P'),
                    new Plug('Q', 'R'), new Plug('S', 'T'), new Plug('U', 'V'), new Plug('W', 'X'), new Plug('Y', 'Z'))));

            StringBuilder output = new StringBuilder();

            for (char c : testString1.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers134.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers134, correctOutput134);

    }

    /**
     * Test Three : Ring Settings
     */
    public static void testThree(){
        System.out.println("TEST THREE: STANDARD ENIGMA USING THREE ROTORS, NO PLUGS, RING SETTINGS TESTED.\n");

        /**Three Rotors Test with 10400 chars and 1 ring setting changed**/
        System.out.println("Test A : Three Rotors, 10400 chars, x 100 Tests, 1 ring setting changed.");
        String correctOutput1R = "EFPMTKARVBCGXOQGLYGKMWKCQCGPENCGBMMGPEPJMSFLTLJOVNPYYSISXOPAPIYCHMTVFEYWFPDPPKKUMOSRRGQMSZRRSVIEUYTAJQAJKUISWLXXQPECDJMSSPCHCPYPSKCEACSQZZJLHIYRSFVJHECBORGQOQTUUANYNEZMFBDOFBFXVYJZPDQVVWTAKXXOJGGJMVNPWMQFUUHLXYKPPGCZJHTVBUNQJMHEGKYPGKGPGVOOPTZCVOZRSITSHJJSUNGYLMFYNSONVHLVNDIDWCORHRALXUEFRJVNTQSCCVXIJERSBCGUGPAKFCLRMXITVKRNURSKIPCNMWGZADGPENCSAZJOJIGDITHPNBVGGSIWDKISHJRZJBYCHYZGBEEZOBCYCAKUQGUVNIQDJNGHUZFSPNQUQWPTOQLRMBAEVZTPBBDVJODOBKRMRSLMKPOWOWRVAQLCWICBTZZFTPJKUHVWPUXBXMITCRSXXLDGCPHSDWVWKPSNSQPFWVKGYWKTZZNRAKBF";
        fourthRotorTest = false;
        ArrayList<String> answers1R = new ArrayList<>();

        for(int i = 1; i <= 100; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorINotches, 0, Components.RotorI.clone()),
                    new Rotor(2, Components.RotorIINotches, 0, Components.RotorII.clone()),
                    new Rotor(3, Components.RotorIIINotches, 0, Components.RotorIII.clone()),
                    new Rotor(4, Components.RotorIVNotches, 0, Components.RotorIV.clone())};

            testRotors[0].changeRingSetting(2);
            Reflector testReflector = new Reflector(Components.ReflectorB);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>());

            StringBuilder output = new StringBuilder();

            for (char c : testString.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers1R.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers1R, correctOutput1R);

        /**Three Rotors Test with 10400 chars and 3 ring settings changed**/
        System.out.println("Test B : Three Rotors, 10400 chars, x 100 Tests, 3 ring settings changed.");
        String correctOutput3R = "NWQKFKTRXNUNTWKBFYOWLLRWZTVWLYSZNLXXBDYCWIHLIHGKCEFRWJDAYVRBYEJMFVJQLYOALIAHALHUEXHJLOEVOQUUTCWKLKEJFGPBRXJIPSBFUYIJPEXNKUWYIKXABHYZOUFKUMBRYZECJHXBCGQUXABGYMUYOPNDCBHUYMUTVKLOHKSPJCTSBXHJLWJEJMURJNSIKMWXGDKMDYPWGMCFNYIJXHVVCODLAHMNTYUCIJKHORAZAGBKKHSMVMRXJYSMKSRXHJLIJOPRUPVFGJQIFUGDKDBGDWNACSVMGYXMUQMIKRPTGDKQUQIGYVFADEJMKSRSDZRJYDIBDWCPKQQRWLZAFVJPAKPFMQGOIBDIKVYAZIRNPPRSFJMFKUWYYOOUHHUDIKKHTWRDXHTRMKHPTHACUMRRXPQJBQOIZAFVBWILGIKIDHKOQDBQUZNAERDCEBDIKSZJQVGIYZGFPGEAWDRBVDXHFCTGCKLLMDPROYNCZHQRPLAMGYCAANUVPCGJFGPP";
        fourthRotorTest = false;
        ArrayList<String> answers3R = new ArrayList<>();

        for(int i = 1; i <= 100; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorINotches, 0, Components.RotorI.clone()),
                    new Rotor(2, Components.RotorIINotches, 0, Components.RotorII.clone()),
                    new Rotor(3, Components.RotorIIINotches, 0, Components.RotorIII.clone()),
                    new Rotor(4, Components.RotorIVNotches, 0, Components.RotorIV.clone())};

            testRotors[0].changeRingSetting(25);
            testRotors[1].changeRingSetting(6);
            testRotors[2].changeRingSetting(13);
            Reflector testReflector = new Reflector(Components.ReflectorB);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>());

            StringBuilder output = new StringBuilder();

            for (char c : testString.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers3R.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers3R, correctOutput3R);

    }

    /**
     * Test Four : Rotor Positions
     */
    public static void testFour(){
        System.out.println("TEST FOUR: STANDARD ENIGMA USING THREE ROTORS, NO PLUGS OR RING SETTINGS, ROTOR POSITIONING CHANGED.\n");

        /**Three Rotors Test with 10400 chars and 3 ring settings changed**/
        System.out.println("Test A : Three Rotors, 10400 chars, x 100 Tests, 1 rotor moved.");
        String correctOutput1P = "LJOMDNBRBWDRXYDVBWALVESJAIMQIBIANSWLCPPWQZTABSFAJAECJREGKTTZAEJIGTFGSQLNOCTUKXRXYRODTRFGLXSBNUBWFWPOCUFUVYAJOYTASXJGNPVWJQNLVGGQQACXYBPXIAPMOUTMPMJKCAOPVYSMSAHRXXKDMMAUUJGJHWFUQZAEMUVMGULCCVTWQRACJQVTNBYBFQNNPIJKSHZFPLRPLSHIMQMEJAVCSACXYNIZQBVNIZACSHEYJJELVMSNPREOBTZMLRGQLSKLIPVQIKQDPQNDMIDQQPNKYMCHCSDQMQBUYMCJTXYXRZBPGNDZUJGJDYNASTGQQJTMGZIAKPYSSAZFQZDONPTCZQHJTKQLTCVUZZOKILGJRLPXKPRUVFOFUPOEQTGDYCQRJQUKIRZTOMJVYTWVXHEERHRBEUERZUGBGLKITGZCZHBKOVZIQFGTMOVQRNKOJEEKLXYPYNTAXRJQROYAJDVBTWKATWXKQLCXRFZIGFYDAFMZECKRNZUQ";
        fourthRotorTest = false;
        ArrayList<String> answers1P = new ArrayList<>();

        for(int i = 1; i <= 100; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorINotches, 0, Components.RotorI.clone()),
                    new Rotor(2, Components.RotorIINotches, 0, Components.RotorII.clone()),
                    new Rotor(3, Components.RotorIIINotches, 0, Components.RotorIII.clone()),
                    new Rotor(4, Components.RotorIVNotches, 0, Components.RotorIV.clone())};

            testRotors[0].rotorPosition = 10;
            Reflector testReflector = new Reflector(Components.ReflectorB);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>());

            StringBuilder output = new StringBuilder();

            for (char c : testString.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers1P.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers1P, correctOutput1P);

        /**Three Rotors Test with 10400 chars and 3 rotor settings changed**/
        System.out.println("Test B : Three Rotors, 10400 chars, x 100 Tests, 3 rotors moved.");
        String correctOutput3P = "ZCZKSVVNKZYACHZTGCZPIOEDDHWHRIRIRNHSBCQRJQBPIFZKOZJGZCZVPHSRBDMNSBZTSQXVPJCPFHWXYJMPPZKFWXQRRKDXTUHLOCJJTHREBYFPPGBGTMPMEZWCQZYYCQNAHUPGOBNXGMROCSRMUOXWGNQKLWDSZNHUHKFOHIMOXFQMHYBUBYFVPEOSULSOAIQRMOEVKGNEOWJQNVPWNOUBPEGVXYKLBHAEMCHZLEBHRFDCKRJCBJFXUEANMDMQLORRHUVFHZLWFVZHWGJQMXNICTMQXWXNSQPHFFGAAKGTMOVTHNTEKVTRHKQLHLVVQZQJFXTXVZFCTBFHNUVKQLJRCVEVQREUKLJUULVYHBLTGWDBDXAACWNPPWSHTHHUFCFNNCJFUGNOCSQIPRNPMOAGXJYPJFEWXUVKSLMWVWOTACDVZHMOIFFDNNPQIIWZCEBQAIQRYAUDXRFEOUJCJEXGORHTEEMGHISHONDQMNPRIBDSTFTSYIBXSDWGFGINPXCDQVPT";
        fourthRotorTest = false;
        ArrayList<String> answers3P = new ArrayList<>();

        for(int i = 1; i <= 100; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorINotches, 0, Components.RotorI.clone()),
                    new Rotor(2, Components.RotorIINotches, 0, Components.RotorII.clone()),
                    new Rotor(3, Components.RotorIIINotches, 0, Components.RotorIII.clone()),
                    new Rotor(4, Components.RotorIVNotches, 0, Components.RotorIV.clone())};

            testRotors[0].rotorPosition = 5;
            testRotors[1].rotorPosition = 15;
            testRotors[2].rotorPosition = 25;
            Reflector testReflector = new Reflector(Components.ReflectorB);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>());

            StringBuilder output = new StringBuilder();

            for (char c : testString.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers3P.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers3P, correctOutput3P);

        /**Four Rotors Test with 10400 chars and 4 rotor positions changed**/
        System.out.println("Test C : Four Rotors, 10400 chars, x 100 Tests, 4 rotors moved.");
        String correctOutput4P4 = "VREJITSXBVXJFCFGICYWGJQPPNPYAHJQEMAFWNARKLZLUPSOOAJMSWDZDEMEPSUAQWQZTSWYBSYMCDEREXATQSNBPWPPMORQWFYXGIQFOXYKSJSUWHCBNICSXFYWMJJPETGYAFGSALPKNMHUZTEUKENJEPDHWFUWTIXBSXSGEBJQAABBMCSJATGUVFUHAWLIRFSOLNLVDQEWBYBRHAHOHAJYKODORSJQGQZMITBDBYFXYIJHZNGOIOLMPMKQDFSDYVCDEXYZTUSONBSWTFJQVEEUTRHVLPUKQLMHPVKTQDZUDVWUDQMUHMLEBQIFTKQCJPSSEPTXXFRQQZUEOEBZBUYVRLJUVYNSFGVLXWEBKCTDEYAOIEZVABQWLGGJZSNMCUXQZYFPFQUCKEWMCUWJZTUCCREPEBDHWMGOAIITCXOGUJXDYBIUICRDVDEMGIGQMGPBHWUWDVTCWZOQLCRQNQIRWCKSLQGTPFCSGHZAYBZBHQNVPKSGUNCKGMZOCSRGFBPWCFFU";
        fourthRotorTest = true;
        ArrayList<String> answers4P4 = new ArrayList<>();

        for(int i = 1; i <= 100; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorINotches, 0, Components.RotorI.clone()),
                    new Rotor(2, Components.RotorIINotches, 0, Components.RotorII.clone()),
                    new Rotor(3, Components.RotorIIINotches, 0, Components.RotorIII.clone()),
                    new Rotor(4, Components.RotorIVNotches, 0, Components.RotorIV.clone())};

            testRotors[0].rotorPosition = 3;
            testRotors[1].rotorPosition = 9;
            testRotors[2].rotorPosition = 15;
            testRotors[3].rotorPosition = 21;
            Reflector testReflector = new Reflector(Components.ReflectorB);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>());

            StringBuilder output = new StringBuilder();

            for (char c : testString.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers4P4.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers4P4, correctOutput4P4);
    }

    /**
     * Test Five: Multiple variations and combinations proof test
     */
    public static void testFive() {
        System.out.println("TEST FIVE: VARIATIONS OF THE ENIGMA USING THREE AND FOUR ROTORS, ALL OPTIONS CHANGED.\n");

        /**Four Rotors Test **/
        System.out.println("Test A : Four Rotors, 10400 chars, x 1000 Tests, Multiple Items Changed.");
        String correctOutput4 = "KGNJUSMEBRHAVTEWZJXIPWHTGJMUUWHYNWTGBYUFQRMMBGJXKGMXMEYSXKNRNIISGBBKCSOGDJDEXDRNKIIENAYSLIJAWCHKQWSIAHAFGLOOXHQIUYJSULYUPYZDXOLCKFILAAMIVPUCUWBHPYPHWWYIQDXDDLHYDWWTUEMXQIDLBNODXFLCOYUMTSXQTVCUIGPSXGSCYPEZCNVWLJXPDMMESNWVCIKYDGBDRXLMXDNUKSPEJOTPIKYJJRTOMOTPNBMKMIAFNIINEKYEBSZIVQYJZTJARPZKDBMUDFZZEHDRKCDPCQFNUWTRYRPLWCBIOLAJSDBWCSVSFJDWTSBXQVQLMMMLGKYKBLCSCOQWMPIJXZDSXUDKRHIKYEMFUHPLYZZDLHKAJXPRVPHDXXHSUFAPURJMRGCHKCAOFIVPDMJDBQLEFTXJYSSDIWZOQEJLYLAMZKYKQIMMDPZHKACGNMSYXTWYAZMMDXRBXMXFGGKJIYUZGQIPZERWPPLWELZJKDPMLTGR";
        fourthRotorTest = true;
        ArrayList<String> answers4 = new ArrayList<>();

        for (int i = 1; i <= 1000; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorVIIINotches, 0, Components.RotorVIII.clone()),
                    new Rotor(2, Components.RotorINotches, 0, Components.RotorI.clone()),
                    new Rotor(3, Components.RotorVINotches, 0, Components.RotorVI.clone()),
                    new Rotor(4, Components.RotorIINotches, 0, Components.RotorII.clone())};

            Reflector testReflector = new Reflector(Components.ReflectorC);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>(Arrays.asList(new Plug('K', 'B'), new Plug('W', 'D'), new Plug('E', 'F'),
                    new Plug('Y', 'H'), new Plug('R', 'J'), new Plug('A', 'L'), new Plug('M', 'N'), new Plug('O', 'P'),
                    new Plug('Q', 'I'), new Plug('S', 'T'), new Plug('U', 'V'), new Plug('C', 'X'), new Plug('G', 'Z'))));

            testRotors[0].changeRingSetting(20);
            testRotors[1].changeRingSetting(7);
            testRotors[2].changeRingSetting(9);
            testRotors[3].changeRingSetting(3);
            testRotors[0].rotorPosition = 11;
            testRotors[1].rotorPosition = 4;
            testRotors[2].rotorPosition = 16;
            testRotors[3].rotorPosition = 22;


            StringBuilder output = new StringBuilder();


            for (char c : testString.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers4.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers4, correctOutput4);

        /**Three Rotors Test **/
        System.out.println("Test B : Three Rotors, 10400 chars, x 1000 Tests, Multiple Items Changed.");
        String correctOutput3A = "RJQQPCLDDYWQPXYVNSBCREMHWROZKWKKQAQVSMIVRYHORXJUEOUAMCSMHMZSNBMBCDJMOIQCBHILWJUDVQIKBDVYFQJKYEJNJWRPNQGUFMDWKHHKOLZHBKVUFWEKKQFNXEWEYIGYHXEZDTYFABFWMOSTVDZXQQMOTPWJMBLNIKEOHIAZLGSOTKSNOQRBHTVRVVYAKLKYZINKNDKGQIDTZWKFFHZIZCBUTCOVXQJWAEIWJBVZOXJNTTQOGCUDEOENHUCYTCNPTOCBGDXEVTEOUQAJLGCGPOGNAVLSLEUCOXLMCNEGHPADSPTNSGPGFBEIOYMFOQYLWZBHRKDVKJESYWCWPZRQJVOEUFITZBHIDVVFPVFHJEMDSKBQWHQINSDYWWLSMTYCBSKURIESHTTFUGRMNOHYUKZLGVMACPWYZZGDRDJOVFEDBGVJBDCNWOWJBEJPNUIJGVHEYREEPOLPKQNZFTIZTTJHHHIWIQJNQZXFPFWOGYJSREBPCCLXJNNSIDBDTPRH";
        fourthRotorTest = false;
        ArrayList<String> answers3A = new ArrayList<>();

        for (int i = 1; i <= 1000; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorIVNotches, 0, Components.RotorIV.clone()),
                    new Rotor(2, Components.RotorIKNotches, 0, Components.RotorIK.clone()),
                    new Rotor(3, Components.GammaNotches, 0, Components.Gamma.clone()),
                    new Rotor(4, Components.RotorIICNotches, 0, Components.RotorIIC.clone())};

            Reflector testReflector = new Reflector(Components.ReflectorCThin);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>(Arrays.asList(new Plug('A', 'B'), new Plug('C', 'D'), new Plug('E', 'F'),
                    new Plug('G', 'H'), new Plug('I', 'J'), new Plug('K', 'L'), new Plug('M', 'N'), new Plug('O', 'P'),
                    new Plug('Q', 'R'), new Plug('S', 'T'), new Plug('U', 'V'), new Plug('W', 'X'), new Plug('Y', 'Z'))));

            testRotors[0].changeRingSetting(25);
            testRotors[1].changeRingSetting(6);
            testRotors[0].rotorPosition = 2;
            testRotors[2].rotorPosition = 15;


            StringBuilder output = new StringBuilder();


            for (char c : testString.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers3A.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers3A, correctOutput3A);

        /**Four Rotors Test **/
        System.out.println("Test C : Four Rotors, 10400 chars, x 1000 Tests, Multiple Items Changed.");
        String correctOutput4A = "NHJXQBMESDZZKJHDUFPYXPSBWXVOLWWMEEVTMMRMXTDFGDFJDMCQKUUHCHDPVWNINEDEDLPRXAAEFXVOBFUQURPRYTPFXVPGJJAWVSODFMZSVUYAEWWCAPXYGJJDMYEZXQKVEQRPKZAWWYSUFUUWWQXNSTQEVOBSUUFEGCROKYTXJTTNRHOCFRUZIEHSUKNUYUGFJLMQCLYXLONEQKHABZSIMLRDUSRMUPCJQUSNUACRQNJEHEKNPBDTSKPWWZAUFNHVZMOYSIHVGHBEXICDMZJVDBZHNFWQMBZJEMTCWJRSATDEXCNOQNACPFLZWKHFLPSVNQPDSFMLGAGOTKBXECRREXVXOTRVKNCKTMEOQJAIPCAETSIFRETWLQUHKQJOZFBEPLLISTIOZWMIWDTXTXCDRVDXLKTTTQVCDRNIUXEFGVCXAUTNCHCWFTQEVEDSSJXSYIGFYAKPMEGQJITHCXMCZRYBKIHMWVRYWJULKGGOVSRARIOYMXAYBESWCTAWWKZQOPEU";
        fourthRotorTest = true;
        ArrayList<String> answers4A = new ArrayList<>();

        for (int i = 1; i <= 1000; i++) {
            Rotor[] testRotors = new Rotor[]{new Rotor(1, Components.RotorINotches, 0, Components.RotorI.clone()),
                    new Rotor(2, Components.RotorIIIKNotches, 0, Components.RotorIIIK.clone()),
                    new Rotor(3, Components.RotorVINotches, 0, Components.RotorVI.clone()),
                    new Rotor(4, Components.BetaNotches, 0, Components.Beta.clone())};

            Reflector testReflector = new Reflector(Components.ReflectorBThin);
            Plugboard testPlugboard = new Plugboard(new ArrayList<>(Arrays.asList(new Plug('K', 'B'), new Plug('W', 'D'), new Plug('E', 'F'),
                    new Plug('Y', 'H'), new Plug('R', 'J'), new Plug('A', 'L'), new Plug('M', 'N'), new Plug('O', 'P'),
                    new Plug('Q', 'I'), new Plug('S', 'T'), new Plug('U', 'V'), new Plug('C', 'X'), new Plug('G', 'Z'))));

            testRotors[0].changeRingSetting(4);
            testRotors[1].changeRingSetting(11);
            testRotors[2].changeRingSetting(21);
            testRotors[3].changeRingSetting(14);
            testRotors[0].rotorPosition = 2;
            testRotors[1].rotorPosition = 24;
            testRotors[2].rotorPosition = 19;
            testRotors[3].rotorPosition = 12;


            StringBuilder output = new StringBuilder();


            for (char c : testString.toCharArray()) {
                char cipherLetter = testEncryptLetter(testRotors, c, testPlugboard, testReflector);
                output.append(cipherLetter);
            }
            answers4A.add(output.toString());
        }

        System.out.println("Completed Test");
        testCorrectness(answers4A, correctOutput4A);
    }

    /**
     * Method for testing whether the correct result was gained in all tests done for a particular arrangement of encryption system.
     * @param results   The list of results gained from each of the tests.
     * @param correctResult The correct result obtained from other sources.
     */
    public static void testCorrectness(ArrayList<String> results, String correctResult){
        boolean correct = true;
        for (String result : results) {
            if (!result.equals(correctResult)) {
                correct = false;
                break;
            }
        }

        if (correct) {
            System.out.println("Test Passed Successfully\n");
            finalResults.add("Correct");
        } else {
            System.out.println("Test Failed : Wrong Result Given\n");
            finalResults.add("False");
        }


    }

    /**
     * Testing method of encryption for the enigma machine.
     * @param rotors Rotors to be used for encrypting
     * @param encrypted Character to be encrypted
     * @param plugboard The plugboard with appropiate plugs.
     * @param reflector The reflector showing the links between chars.
     * @return The encrypted character.
     */
    public static char testEncryptLetter(Rotor[] rotors, char encrypted, Plugboard plugboard, Reflector reflector){

        //Checking to see if the fourth rotor is enabled, and if so, to add on an extra iteration so that it is used when encrypting.
        int iterations = rotors.length - 1;
        if(!fourthRotorTest){
            iterations -= 1;
        }

        //Before the encryption starts, the fast rotor is always moved forward one position.
        rotors[0].rotateRotorOnceForward();

        // Checking if adjacent rotor needs to be pushed forward one if the notch is passed, plus additional check if notch position is 25, to loop.
        for(int i = 2; i >= 0; i --) {
            if (rotors[i].rotateAdjRotor() && rotors[i].canRotateAdjRotor) {
                if(rotors[i].notchPositions[0] == 25) {
                    if(rotors[i].charCount > 0) {
                        rotors[i + 1].rotateRotorOnceForward();
                    }
                }else{
                    rotors[i + 1].rotateRotorOnceForward();
                }

                // Accounting for the "double step" of rotor 2 and 3.**/
                if(i == 1 && rotors[1].notchPositions[0] == rotors[1].rotorPosition) {
                    rotors[1].rotateRotorOnceForward();
                    rotors[1].canRotateAdjRotor = false;
                }if(i == 0){
                    rotors[1].canRotateAdjRotor = true;
                }
            }

        }

        for(Rotor rotor:rotors){
            rotor.charCount += 1;
        }

        /** First step is putting the letter through the plugboard. **/

        encrypted = plugboard.checkPlugboard(encrypted);

        /** Then, going forward through rotors **/

        for(int i = 0; i <= iterations; i++) {
            if(i == 0){
                encrypted = rotors[i].translate(encrypted, false, 0);
            } else {
                encrypted = rotors[i].translate(encrypted, false, rotors[i - 1].rotorPosition);
            }
        }

        /** On to the reflector encryption (dependant on the fourth rotor) **/
        if(fourthRotorTest) {
            encrypted = reflector.testGetReflection(encrypted, rotors[3].rotorPosition);
        }else{
            encrypted = reflector.testGetReflection(encrypted, rotors[2].rotorPosition);
        }

        /** Back through the rotors from the reflector **/

        for(int j = iterations; j >= 0; j--) {
            if(j == iterations){
                encrypted = rotors[j].translate(encrypted, true, 0);
            } else {
                encrypted = rotors[j].translate(encrypted, true, rotors[j + 1].rotorPosition);
            }
        }

        /** Final plugboard encryption **/
        encrypted = plugboard.checkPlugboard(encrypted);

        return encrypted;
    }
}
